/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CompetitionClient
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Enrollment : TBase
  {

    public long Id { get; set; }

    public Child Child { get; set; }

    public Round Round { get; set; }

    public bool IsNull { get; set; }

    public Enrollment() {
      this.IsNull = false;
    }

    public Enrollment(long id, Child child, Round round, bool isNull) : this() {
      this.Id = id;
      this.Child = child;
      this.Round = round;
      this.IsNull = isNull;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        bool isset_child = false;
        bool isset_round = false;
        bool isset_isNull = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
                isset_id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Child = new Child();
                Child.Read(iprot);
                isset_child = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Round = new Round();
                Round.Read(iprot);
                isset_round = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsNull = iprot.ReadBool();
                isset_isNull = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_id)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Id not set");
        if (!isset_child)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Child not set");
        if (!isset_round)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Round not set");
        if (!isset_isNull)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsNull not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Enrollment");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
        if (Child == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Child not set");
        field.Name = "child";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Child.Write(oprot);
        oprot.WriteFieldEnd();
        if (Round == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Round not set");
        field.Name = "round";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Round.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "isNull";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsNull);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Enrollment(");
      __sb.Append(", Id: ");
      __sb.Append(Id);
      __sb.Append(", Child: ");
      __sb.Append(Child== null ? "<null>" : Child.ToString());
      __sb.Append(", Round: ");
      __sb.Append(Round== null ? "<null>" : Round.ToString());
      __sb.Append(", IsNull: ");
      __sb.Append(IsNull);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
