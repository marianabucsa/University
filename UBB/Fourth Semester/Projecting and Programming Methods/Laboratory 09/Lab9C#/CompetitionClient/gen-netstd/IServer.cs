/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class IServer
{
  public interface IAsync
  {
    global::System.Threading.Tasks.Task logout(User u, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<User> login(string username, string password, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<long> getNrChildrenForRound(string name, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<List<Round>> findAllRounds(CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<Enrollment> FindEnrollmentByChildAndRound(string firstname, string lastname, string roundName, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<Child> SaveChild(string firstname, string lastname, int age, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<List<Child>> findChildrenForRound(string roundName, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<Child> FindChildByName(string firstname, string lastname, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<List<Child>> FindChildrenByAgeGroup(string ageGroup, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<Enrollment> SaveEnrollment(string firstname, string lastname, int age, string roundName, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<long> FindNumberOfEnrollmentsForChild(string firstname, string lastname, CancellationToken cancellationToken = default);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task logout(User u, CancellationToken cancellationToken = default)
    {
      await send_logout(u, cancellationToken);
      await recv_logout(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_logout(User u, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("logout", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp34 = new InternalStructs.logout_args() {
        U = u,
      };
      
      await tmp34.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_logout(CancellationToken cancellationToken = default)
    {
      
      var tmp35 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp35.Type == TMessageType.Exception)
      {
        var tmp36 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp36;
      }

      var tmp37 = new InternalStructs.logout_result();
      await tmp37.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<User> login(string username, string password, CancellationToken cancellationToken = default)
    {
      await send_login(username, password, cancellationToken);
      return await recv_login(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_login(string username, string password, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("login", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp38 = new InternalStructs.login_args() {
        Username = username,
        Password = password,
      };
      
      await tmp38.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<User> recv_login(CancellationToken cancellationToken = default)
    {
      
      var tmp39 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp39.Type == TMessageType.Exception)
      {
        var tmp40 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp40;
      }

      var tmp41 = new InternalStructs.login_result();
      await tmp41.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp41.__isset.success)
      {
        return tmp41.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> getNrChildrenForRound(string name, CancellationToken cancellationToken = default)
    {
      await send_getNrChildrenForRound(name, cancellationToken);
      return await recv_getNrChildrenForRound(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_getNrChildrenForRound(string name, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNrChildrenForRound", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp42 = new InternalStructs.getNrChildrenForRound_args() {
        Name = name,
      };
      
      await tmp42.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_getNrChildrenForRound(CancellationToken cancellationToken = default)
    {
      
      var tmp43 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp43.Type == TMessageType.Exception)
      {
        var tmp44 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp44;
      }

      var tmp45 = new InternalStructs.getNrChildrenForRound_result();
      await tmp45.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp45.__isset.success)
      {
        return tmp45.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNrChildrenForRound failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<Round>> findAllRounds(CancellationToken cancellationToken = default)
    {
      await send_findAllRounds(cancellationToken);
      return await recv_findAllRounds(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_findAllRounds(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("findAllRounds", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp46 = new InternalStructs.findAllRounds_args() {
      };
      
      await tmp46.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Round>> recv_findAllRounds(CancellationToken cancellationToken = default)
    {
      
      var tmp47 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp47.Type == TMessageType.Exception)
      {
        var tmp48 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp48;
      }

      var tmp49 = new InternalStructs.findAllRounds_result();
      await tmp49.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp49.__isset.success)
      {
        return tmp49.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllRounds failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Enrollment> FindEnrollmentByChildAndRound(string firstname, string lastname, string roundName, CancellationToken cancellationToken = default)
    {
      await send_FindEnrollmentByChildAndRound(firstname, lastname, roundName, cancellationToken);
      return await recv_FindEnrollmentByChildAndRound(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_FindEnrollmentByChildAndRound(string firstname, string lastname, string roundName, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp50 = new InternalStructs.FindEnrollmentByChildAndRound_args() {
        Firstname = firstname,
        Lastname = lastname,
        RoundName = roundName,
      };
      
      await tmp50.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Enrollment> recv_FindEnrollmentByChildAndRound(CancellationToken cancellationToken = default)
    {
      
      var tmp51 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp51.Type == TMessageType.Exception)
      {
        var tmp52 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp52;
      }

      var tmp53 = new InternalStructs.FindEnrollmentByChildAndRound_result();
      await tmp53.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp53.__isset.success)
      {
        return tmp53.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindEnrollmentByChildAndRound failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Child> SaveChild(string firstname, string lastname, int age, CancellationToken cancellationToken = default)
    {
      await send_SaveChild(firstname, lastname, age, cancellationToken);
      return await recv_SaveChild(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_SaveChild(string firstname, string lastname, int age, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveChild", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp54 = new InternalStructs.SaveChild_args() {
        Firstname = firstname,
        Lastname = lastname,
        Age = age,
      };
      
      await tmp54.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Child> recv_SaveChild(CancellationToken cancellationToken = default)
    {
      
      var tmp55 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp55.Type == TMessageType.Exception)
      {
        var tmp56 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp56;
      }

      var tmp57 = new InternalStructs.SaveChild_result();
      await tmp57.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp57.__isset.success)
      {
        return tmp57.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveChild failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<Child>> findChildrenForRound(string roundName, CancellationToken cancellationToken = default)
    {
      await send_findChildrenForRound(roundName, cancellationToken);
      return await recv_findChildrenForRound(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_findChildrenForRound(string roundName, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("findChildrenForRound", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp58 = new InternalStructs.findChildrenForRound_args() {
        RoundName = roundName,
      };
      
      await tmp58.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Child>> recv_findChildrenForRound(CancellationToken cancellationToken = default)
    {
      
      var tmp59 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp59.Type == TMessageType.Exception)
      {
        var tmp60 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp60;
      }

      var tmp61 = new InternalStructs.findChildrenForRound_result();
      await tmp61.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp61.__isset.success)
      {
        return tmp61.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findChildrenForRound failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Child> FindChildByName(string firstname, string lastname, CancellationToken cancellationToken = default)
    {
      await send_FindChildByName(firstname, lastname, cancellationToken);
      return await recv_FindChildByName(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_FindChildByName(string firstname, string lastname, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("FindChildByName", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp62 = new InternalStructs.FindChildByName_args() {
        Firstname = firstname,
        Lastname = lastname,
      };
      
      await tmp62.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Child> recv_FindChildByName(CancellationToken cancellationToken = default)
    {
      
      var tmp63 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp63.Type == TMessageType.Exception)
      {
        var tmp64 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp64;
      }

      var tmp65 = new InternalStructs.FindChildByName_result();
      await tmp65.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp65.__isset.success)
      {
        return tmp65.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindChildByName failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<Child>> FindChildrenByAgeGroup(string ageGroup, CancellationToken cancellationToken = default)
    {
      await send_FindChildrenByAgeGroup(ageGroup, cancellationToken);
      return await recv_FindChildrenByAgeGroup(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_FindChildrenByAgeGroup(string ageGroup, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("FindChildrenByAgeGroup", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp66 = new InternalStructs.FindChildrenByAgeGroup_args() {
        AgeGroup = ageGroup,
      };
      
      await tmp66.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Child>> recv_FindChildrenByAgeGroup(CancellationToken cancellationToken = default)
    {
      
      var tmp67 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp67.Type == TMessageType.Exception)
      {
        var tmp68 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp68;
      }

      var tmp69 = new InternalStructs.FindChildrenByAgeGroup_result();
      await tmp69.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp69.__isset.success)
      {
        return tmp69.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindChildrenByAgeGroup failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Enrollment> SaveEnrollment(string firstname, string lastname, int age, string roundName, CancellationToken cancellationToken = default)
    {
      await send_SaveEnrollment(firstname, lastname, age, roundName, cancellationToken);
      return await recv_SaveEnrollment(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_SaveEnrollment(string firstname, string lastname, int age, string roundName, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveEnrollment", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp70 = new InternalStructs.SaveEnrollment_args() {
        Firstname = firstname,
        Lastname = lastname,
        Age = age,
        RoundName = roundName,
      };
      
      await tmp70.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Enrollment> recv_SaveEnrollment(CancellationToken cancellationToken = default)
    {
      
      var tmp71 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp71.Type == TMessageType.Exception)
      {
        var tmp72 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp72;
      }

      var tmp73 = new InternalStructs.SaveEnrollment_result();
      await tmp73.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp73.__isset.success)
      {
        return tmp73.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveEnrollment failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> FindNumberOfEnrollmentsForChild(string firstname, string lastname, CancellationToken cancellationToken = default)
    {
      await send_FindNumberOfEnrollmentsForChild(firstname, lastname, cancellationToken);
      return await recv_FindNumberOfEnrollmentsForChild(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_FindNumberOfEnrollmentsForChild(string firstname, string lastname, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp74 = new InternalStructs.FindNumberOfEnrollmentsForChild_args() {
        Firstname = firstname,
        Lastname = lastname,
      };
      
      await tmp74.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_FindNumberOfEnrollmentsForChild(CancellationToken cancellationToken = default)
    {
      
      var tmp75 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp75.Type == TMessageType.Exception)
      {
        var tmp76 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp76;
      }

      var tmp77 = new InternalStructs.FindNumberOfEnrollmentsForChild_result();
      await tmp77.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp77.__isset.success)
      {
        return tmp77.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindNumberOfEnrollmentsForChild failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["logout"] = logout_ProcessAsync;
      processMap_["login"] = login_ProcessAsync;
      processMap_["getNrChildrenForRound"] = getNrChildrenForRound_ProcessAsync;
      processMap_["findAllRounds"] = findAllRounds_ProcessAsync;
      processMap_["FindEnrollmentByChildAndRound"] = FindEnrollmentByChildAndRound_ProcessAsync;
      processMap_["SaveChild"] = SaveChild_ProcessAsync;
      processMap_["findChildrenForRound"] = findChildrenForRound_ProcessAsync;
      processMap_["FindChildByName"] = FindChildByName_ProcessAsync;
      processMap_["FindChildrenByAgeGroup"] = FindChildrenByAgeGroup_ProcessAsync;
      processMap_["SaveEnrollment"] = SaveEnrollment_ProcessAsync;
      processMap_["FindNumberOfEnrollmentsForChild"] = FindNumberOfEnrollmentsForChild_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task logout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp78 = new InternalStructs.logout_args();
      await tmp78.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp79 = new InternalStructs.logout_result();
      try
      {
        await _iAsync.logout(tmp78.U, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("logout", TMessageType.Reply, seqid), cancellationToken); 
        await tmp79.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp80)
      {
        var tmp81 = $"Error occurred in {GetType().FullName}: {tmp80.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp80, tmp81);
        else
          Console.Error.WriteLine(tmp81);
        var tmp82 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("logout", TMessageType.Exception, seqid), cancellationToken);
        await tmp82.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp83 = new InternalStructs.login_args();
      await tmp83.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp84 = new InternalStructs.login_result();
      try
      {
        tmp84.Success = await _iAsync.login(tmp83.Username, tmp83.Password, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("login", TMessageType.Reply, seqid), cancellationToken); 
        await tmp84.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp85)
      {
        var tmp86 = $"Error occurred in {GetType().FullName}: {tmp85.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp85, tmp86);
        else
          Console.Error.WriteLine(tmp86);
        var tmp87 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("login", TMessageType.Exception, seqid), cancellationToken);
        await tmp87.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task getNrChildrenForRound_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp88 = new InternalStructs.getNrChildrenForRound_args();
      await tmp88.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp89 = new InternalStructs.getNrChildrenForRound_result();
      try
      {
        tmp89.Success = await _iAsync.getNrChildrenForRound(tmp88.Name, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("getNrChildrenForRound", TMessageType.Reply, seqid), cancellationToken); 
        await tmp89.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp90)
      {
        var tmp91 = $"Error occurred in {GetType().FullName}: {tmp90.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp90, tmp91);
        else
          Console.Error.WriteLine(tmp91);
        var tmp92 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getNrChildrenForRound", TMessageType.Exception, seqid), cancellationToken);
        await tmp92.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task findAllRounds_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp93 = new InternalStructs.findAllRounds_args();
      await tmp93.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp94 = new InternalStructs.findAllRounds_result();
      try
      {
        tmp94.Success = await _iAsync.findAllRounds(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("findAllRounds", TMessageType.Reply, seqid), cancellationToken); 
        await tmp94.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp95)
      {
        var tmp96 = $"Error occurred in {GetType().FullName}: {tmp95.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp95, tmp96);
        else
          Console.Error.WriteLine(tmp96);
        var tmp97 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("findAllRounds", TMessageType.Exception, seqid), cancellationToken);
        await tmp97.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task FindEnrollmentByChildAndRound_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp98 = new InternalStructs.FindEnrollmentByChildAndRound_args();
      await tmp98.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp99 = new InternalStructs.FindEnrollmentByChildAndRound_result();
      try
      {
        tmp99.Success = await _iAsync.FindEnrollmentByChildAndRound(tmp98.Firstname, tmp98.Lastname, tmp98.RoundName, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Reply, seqid), cancellationToken); 
        await tmp99.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp100)
      {
        var tmp101 = $"Error occurred in {GetType().FullName}: {tmp100.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp100, tmp101);
        else
          Console.Error.WriteLine(tmp101);
        var tmp102 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Exception, seqid), cancellationToken);
        await tmp102.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task SaveChild_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp103 = new InternalStructs.SaveChild_args();
      await tmp103.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp104 = new InternalStructs.SaveChild_result();
      try
      {
        tmp104.Success = await _iAsync.SaveChild(tmp103.Firstname, tmp103.Lastname, tmp103.Age, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("SaveChild", TMessageType.Reply, seqid), cancellationToken); 
        await tmp104.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp105)
      {
        var tmp106 = $"Error occurred in {GetType().FullName}: {tmp105.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp105, tmp106);
        else
          Console.Error.WriteLine(tmp106);
        var tmp107 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("SaveChild", TMessageType.Exception, seqid), cancellationToken);
        await tmp107.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task findChildrenForRound_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp108 = new InternalStructs.findChildrenForRound_args();
      await tmp108.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp109 = new InternalStructs.findChildrenForRound_result();
      try
      {
        tmp109.Success = await _iAsync.findChildrenForRound(tmp108.RoundName, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("findChildrenForRound", TMessageType.Reply, seqid), cancellationToken); 
        await tmp109.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp110)
      {
        var tmp111 = $"Error occurred in {GetType().FullName}: {tmp110.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp110, tmp111);
        else
          Console.Error.WriteLine(tmp111);
        var tmp112 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("findChildrenForRound", TMessageType.Exception, seqid), cancellationToken);
        await tmp112.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task FindChildByName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp113 = new InternalStructs.FindChildByName_args();
      await tmp113.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp114 = new InternalStructs.FindChildByName_result();
      try
      {
        tmp114.Success = await _iAsync.FindChildByName(tmp113.Firstname, tmp113.Lastname, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("FindChildByName", TMessageType.Reply, seqid), cancellationToken); 
        await tmp114.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp115)
      {
        var tmp116 = $"Error occurred in {GetType().FullName}: {tmp115.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp115, tmp116);
        else
          Console.Error.WriteLine(tmp116);
        var tmp117 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("FindChildByName", TMessageType.Exception, seqid), cancellationToken);
        await tmp117.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task FindChildrenByAgeGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp118 = new InternalStructs.FindChildrenByAgeGroup_args();
      await tmp118.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp119 = new InternalStructs.FindChildrenByAgeGroup_result();
      try
      {
        tmp119.Success = await _iAsync.FindChildrenByAgeGroup(tmp118.AgeGroup, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("FindChildrenByAgeGroup", TMessageType.Reply, seqid), cancellationToken); 
        await tmp119.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp120)
      {
        var tmp121 = $"Error occurred in {GetType().FullName}: {tmp120.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp120, tmp121);
        else
          Console.Error.WriteLine(tmp121);
        var tmp122 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("FindChildrenByAgeGroup", TMessageType.Exception, seqid), cancellationToken);
        await tmp122.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task SaveEnrollment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp123 = new InternalStructs.SaveEnrollment_args();
      await tmp123.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp124 = new InternalStructs.SaveEnrollment_result();
      try
      {
        tmp124.Success = await _iAsync.SaveEnrollment(tmp123.Firstname, tmp123.Lastname, tmp123.Age, tmp123.RoundName, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("SaveEnrollment", TMessageType.Reply, seqid), cancellationToken); 
        await tmp124.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp125)
      {
        var tmp126 = $"Error occurred in {GetType().FullName}: {tmp125.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp125, tmp126);
        else
          Console.Error.WriteLine(tmp126);
        var tmp127 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("SaveEnrollment", TMessageType.Exception, seqid), cancellationToken);
        await tmp127.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task FindNumberOfEnrollmentsForChild_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp128 = new InternalStructs.FindNumberOfEnrollmentsForChild_args();
      await tmp128.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp129 = new InternalStructs.FindNumberOfEnrollmentsForChild_result();
      try
      {
        tmp129.Success = await _iAsync.FindNumberOfEnrollmentsForChild(tmp128.Firstname, tmp128.Lastname, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Reply, seqid), cancellationToken); 
        await tmp129.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp130)
      {
        var tmp131 = $"Error occurred in {GetType().FullName}: {tmp130.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp130, tmp131);
        else
          Console.Error.WriteLine(tmp131);
        var tmp132 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Exception, seqid), cancellationToken);
        await tmp132.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class logout_args : TBase
    {
      private User _u;

      public User U
      {
        get
        {
          return _u;
        }
        set
        {
          __isset.u = true;
          this._u = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool u;
      }

      public logout_args()
      {
      }

      public logout_args DeepCopy()
      {
        var tmp133 = new logout_args();
        if((U != null) && __isset.u)
        {
          tmp133.U = (User)this.U.DeepCopy();
        }
        tmp133.__isset.u = this.__isset.u;
        return tmp133;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  U = new User();
                  await U.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp134 = new TStruct("logout_args");
          await oprot.WriteStructBeginAsync(tmp134, cancellationToken);
          var tmp135 = new TField();
          if((U != null) && __isset.u)
          {
            tmp135.Name = "u";
            tmp135.Type = TType.Struct;
            tmp135.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
            await U.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is logout_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.u == other.__isset.u) && ((!__isset.u) || (global::System.Object.Equals(U, other.U))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((U != null) && __isset.u)
          {
            hashcode = (hashcode * 397) + U.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp136 = new StringBuilder("logout_args(");
        int tmp137 = 0;
        if((U != null) && __isset.u)
        {
          if(0 < tmp137++) { tmp136.Append(", "); }
          tmp136.Append("U: ");
          U.ToString(tmp136);
        }
        tmp136.Append(')');
        return tmp136.ToString();
      }
    }


    public partial class logout_result : TBase
    {

      public logout_result()
      {
      }

      public logout_result DeepCopy()
      {
        var tmp138 = new logout_result();
        return tmp138;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp139 = new TStruct("logout_result");
          await oprot.WriteStructBeginAsync(tmp139, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is logout_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp140 = new StringBuilder("logout_result(");
        tmp140.Append(')');
        return tmp140.ToString();
      }
    }


    public partial class login_args : TBase
    {
      private string _username;
      private string _password;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool username;
        public bool password;
      }

      public login_args()
      {
      }

      public login_args DeepCopy()
      {
        var tmp142 = new login_args();
        if((Username != null) && __isset.username)
        {
          tmp142.Username = this.Username;
        }
        tmp142.__isset.username = this.__isset.username;
        if((Password != null) && __isset.password)
        {
          tmp142.Password = this.Password;
        }
        tmp142.__isset.password = this.__isset.password;
        return tmp142;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Username = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Password = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp143 = new TStruct("login_args");
          await oprot.WriteStructBeginAsync(tmp143, cancellationToken);
          var tmp144 = new TField();
          if((Username != null) && __isset.username)
          {
            tmp144.Name = "username";
            tmp144.Type = TType.String;
            tmp144.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp144, cancellationToken);
            await oprot.WriteStringAsync(Username, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Password != null) && __isset.password)
          {
            tmp144.Name = "password";
            tmp144.Type = TType.String;
            tmp144.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp144, cancellationToken);
            await oprot.WriteStringAsync(Password, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is login_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
          && ((__isset.password == other.__isset.password) && ((!__isset.password) || (global::System.Object.Equals(Password, other.Password))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Username != null) && __isset.username)
          {
            hashcode = (hashcode * 397) + Username.GetHashCode();
          }
          if((Password != null) && __isset.password)
          {
            hashcode = (hashcode * 397) + Password.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp145 = new StringBuilder("login_args(");
        int tmp146 = 0;
        if((Username != null) && __isset.username)
        {
          if(0 < tmp146++) { tmp145.Append(", "); }
          tmp145.Append("Username: ");
          Username.ToString(tmp145);
        }
        if((Password != null) && __isset.password)
        {
          if(0 < tmp146++) { tmp145.Append(", "); }
          tmp145.Append("Password: ");
          Password.ToString(tmp145);
        }
        tmp145.Append(')');
        return tmp145.ToString();
      }
    }


    public partial class login_result : TBase
    {
      private User _success;

      public User Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public login_result()
      {
      }

      public login_result DeepCopy()
      {
        var tmp147 = new login_result();
        if((Success != null) && __isset.success)
        {
          tmp147.Success = (User)this.Success.DeepCopy();
        }
        tmp147.__isset.success = this.__isset.success;
        return tmp147;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new User();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp148 = new TStruct("login_result");
          await oprot.WriteStructBeginAsync(tmp148, cancellationToken);
          var tmp149 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp149.Name = "Success";
              tmp149.Type = TType.Struct;
              tmp149.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp149, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is login_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp150 = new StringBuilder("login_result(");
        int tmp151 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp151++) { tmp150.Append(", "); }
          tmp150.Append("Success: ");
          Success.ToString(tmp150);
        }
        tmp150.Append(')');
        return tmp150.ToString();
      }
    }


    public partial class getNrChildrenForRound_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool name;
      }

      public getNrChildrenForRound_args()
      {
      }

      public getNrChildrenForRound_args DeepCopy()
      {
        var tmp152 = new getNrChildrenForRound_args();
        if((Name != null) && __isset.name)
        {
          tmp152.Name = this.Name;
        }
        tmp152.__isset.name = this.__isset.name;
        return tmp152;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Name = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp153 = new TStruct("getNrChildrenForRound_args");
          await oprot.WriteStructBeginAsync(tmp153, cancellationToken);
          var tmp154 = new TField();
          if((Name != null) && __isset.name)
          {
            tmp154.Name = "name";
            tmp154.Type = TType.String;
            tmp154.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp154, cancellationToken);
            await oprot.WriteStringAsync(Name, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getNrChildrenForRound_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Name != null) && __isset.name)
          {
            hashcode = (hashcode * 397) + Name.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp155 = new StringBuilder("getNrChildrenForRound_args(");
        int tmp156 = 0;
        if((Name != null) && __isset.name)
        {
          if(0 < tmp156++) { tmp155.Append(", "); }
          tmp155.Append("Name: ");
          Name.ToString(tmp155);
        }
        tmp155.Append(')');
        return tmp155.ToString();
      }
    }


    public partial class getNrChildrenForRound_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getNrChildrenForRound_result()
      {
      }

      public getNrChildrenForRound_result DeepCopy()
      {
        var tmp157 = new getNrChildrenForRound_result();
        if(__isset.success)
        {
          tmp157.Success = this.Success;
        }
        tmp157.__isset.success = this.__isset.success;
        return tmp157;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp158 = new TStruct("getNrChildrenForRound_result");
          await oprot.WriteStructBeginAsync(tmp158, cancellationToken);
          var tmp159 = new TField();

          if(this.__isset.success)
          {
            tmp159.Name = "Success";
            tmp159.Type = TType.I64;
            tmp159.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp159, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is getNrChildrenForRound_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp160 = new StringBuilder("getNrChildrenForRound_result(");
        int tmp161 = 0;
        if(__isset.success)
        {
          if(0 < tmp161++) { tmp160.Append(", "); }
          tmp160.Append("Success: ");
          Success.ToString(tmp160);
        }
        tmp160.Append(')');
        return tmp160.ToString();
      }
    }


    public partial class findAllRounds_args : TBase
    {

      public findAllRounds_args()
      {
      }

      public findAllRounds_args DeepCopy()
      {
        var tmp162 = new findAllRounds_args();
        return tmp162;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp163 = new TStruct("findAllRounds_args");
          await oprot.WriteStructBeginAsync(tmp163, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is findAllRounds_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp164 = new StringBuilder("findAllRounds_args(");
        tmp164.Append(')');
        return tmp164.ToString();
      }
    }


    public partial class findAllRounds_result : TBase
    {
      private List<Round> _success;

      public List<Round> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public findAllRounds_result()
      {
      }

      public findAllRounds_result DeepCopy()
      {
        var tmp166 = new findAllRounds_result();
        if((Success != null) && __isset.success)
        {
          tmp166.Success = this.Success.DeepCopy();
        }
        tmp166.__isset.success = this.__isset.success;
        return tmp166;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list167 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Round>(_list167.Count);
                    for(int _i168 = 0; _i168 < _list167.Count; ++_i168)
                    {
                      Round _elem169;
                      _elem169 = new Round();
                      await _elem169.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem169);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp170 = new TStruct("findAllRounds_result");
          await oprot.WriteStructBeginAsync(tmp170, cancellationToken);
          var tmp171 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp171.Name = "Success";
              tmp171.Type = TType.List;
              tmp171.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp171, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Round _iter172 in Success)
                {
                  await _iter172.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is findAllRounds_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp173 = new StringBuilder("findAllRounds_result(");
        int tmp174 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp174++) { tmp173.Append(", "); }
          tmp173.Append("Success: ");
          Success.ToString(tmp173);
        }
        tmp173.Append(')');
        return tmp173.ToString();
      }
    }


    public partial class FindEnrollmentByChildAndRound_args : TBase
    {
      private string _firstname;
      private string _lastname;
      private string _roundName;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }

      public string RoundName
      {
        get
        {
          return _roundName;
        }
        set
        {
          __isset.roundName = true;
          this._roundName = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool firstname;
        public bool lastname;
        public bool roundName;
      }

      public FindEnrollmentByChildAndRound_args()
      {
      }

      public FindEnrollmentByChildAndRound_args DeepCopy()
      {
        var tmp175 = new FindEnrollmentByChildAndRound_args();
        if((Firstname != null) && __isset.firstname)
        {
          tmp175.Firstname = this.Firstname;
        }
        tmp175.__isset.firstname = this.__isset.firstname;
        if((Lastname != null) && __isset.lastname)
        {
          tmp175.Lastname = this.Lastname;
        }
        tmp175.__isset.lastname = this.__isset.lastname;
        if((RoundName != null) && __isset.roundName)
        {
          tmp175.RoundName = this.RoundName;
        }
        tmp175.__isset.roundName = this.__isset.roundName;
        return tmp175;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Firstname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Lastname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  RoundName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp176 = new TStruct("FindEnrollmentByChildAndRound_args");
          await oprot.WriteStructBeginAsync(tmp176, cancellationToken);
          var tmp177 = new TField();
          if((Firstname != null) && __isset.firstname)
          {
            tmp177.Name = "firstname";
            tmp177.Type = TType.String;
            tmp177.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp177, cancellationToken);
            await oprot.WriteStringAsync(Firstname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Lastname != null) && __isset.lastname)
          {
            tmp177.Name = "lastname";
            tmp177.Type = TType.String;
            tmp177.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp177, cancellationToken);
            await oprot.WriteStringAsync(Lastname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((RoundName != null) && __isset.roundName)
          {
            tmp177.Name = "roundName";
            tmp177.Type = TType.String;
            tmp177.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp177, cancellationToken);
            await oprot.WriteStringAsync(RoundName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindEnrollmentByChildAndRound_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.firstname == other.__isset.firstname) && ((!__isset.firstname) || (global::System.Object.Equals(Firstname, other.Firstname))))
          && ((__isset.lastname == other.__isset.lastname) && ((!__isset.lastname) || (global::System.Object.Equals(Lastname, other.Lastname))))
          && ((__isset.roundName == other.__isset.roundName) && ((!__isset.roundName) || (global::System.Object.Equals(RoundName, other.RoundName))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Firstname != null) && __isset.firstname)
          {
            hashcode = (hashcode * 397) + Firstname.GetHashCode();
          }
          if((Lastname != null) && __isset.lastname)
          {
            hashcode = (hashcode * 397) + Lastname.GetHashCode();
          }
          if((RoundName != null) && __isset.roundName)
          {
            hashcode = (hashcode * 397) + RoundName.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp178 = new StringBuilder("FindEnrollmentByChildAndRound_args(");
        int tmp179 = 0;
        if((Firstname != null) && __isset.firstname)
        {
          if(0 < tmp179++) { tmp178.Append(", "); }
          tmp178.Append("Firstname: ");
          Firstname.ToString(tmp178);
        }
        if((Lastname != null) && __isset.lastname)
        {
          if(0 < tmp179++) { tmp178.Append(", "); }
          tmp178.Append("Lastname: ");
          Lastname.ToString(tmp178);
        }
        if((RoundName != null) && __isset.roundName)
        {
          if(0 < tmp179++) { tmp178.Append(", "); }
          tmp178.Append("RoundName: ");
          RoundName.ToString(tmp178);
        }
        tmp178.Append(')');
        return tmp178.ToString();
      }
    }


    public partial class FindEnrollmentByChildAndRound_result : TBase
    {
      private Enrollment _success;

      public Enrollment Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public FindEnrollmentByChildAndRound_result()
      {
      }

      public FindEnrollmentByChildAndRound_result DeepCopy()
      {
        var tmp180 = new FindEnrollmentByChildAndRound_result();
        if((Success != null) && __isset.success)
        {
          tmp180.Success = (Enrollment)this.Success.DeepCopy();
        }
        tmp180.__isset.success = this.__isset.success;
        return tmp180;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Enrollment();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp181 = new TStruct("FindEnrollmentByChildAndRound_result");
          await oprot.WriteStructBeginAsync(tmp181, cancellationToken);
          var tmp182 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp182.Name = "Success";
              tmp182.Type = TType.Struct;
              tmp182.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp182, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindEnrollmentByChildAndRound_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp183 = new StringBuilder("FindEnrollmentByChildAndRound_result(");
        int tmp184 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp184++) { tmp183.Append(", "); }
          tmp183.Append("Success: ");
          Success.ToString(tmp183);
        }
        tmp183.Append(')');
        return tmp183.ToString();
      }
    }


    public partial class SaveChild_args : TBase
    {
      private string _firstname;
      private string _lastname;
      private int _age;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }

      public int Age
      {
        get
        {
          return _age;
        }
        set
        {
          __isset.age = true;
          this._age = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool firstname;
        public bool lastname;
        public bool age;
      }

      public SaveChild_args()
      {
      }

      public SaveChild_args DeepCopy()
      {
        var tmp185 = new SaveChild_args();
        if((Firstname != null) && __isset.firstname)
        {
          tmp185.Firstname = this.Firstname;
        }
        tmp185.__isset.firstname = this.__isset.firstname;
        if((Lastname != null) && __isset.lastname)
        {
          tmp185.Lastname = this.Lastname;
        }
        tmp185.__isset.lastname = this.__isset.lastname;
        if(__isset.age)
        {
          tmp185.Age = this.Age;
        }
        tmp185.__isset.age = this.__isset.age;
        return tmp185;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Firstname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Lastname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Age = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp186 = new TStruct("SaveChild_args");
          await oprot.WriteStructBeginAsync(tmp186, cancellationToken);
          var tmp187 = new TField();
          if((Firstname != null) && __isset.firstname)
          {
            tmp187.Name = "firstname";
            tmp187.Type = TType.String;
            tmp187.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp187, cancellationToken);
            await oprot.WriteStringAsync(Firstname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Lastname != null) && __isset.lastname)
          {
            tmp187.Name = "lastname";
            tmp187.Type = TType.String;
            tmp187.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp187, cancellationToken);
            await oprot.WriteStringAsync(Lastname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.age)
          {
            tmp187.Name = "age";
            tmp187.Type = TType.I32;
            tmp187.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp187, cancellationToken);
            await oprot.WriteI32Async(Age, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is SaveChild_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.firstname == other.__isset.firstname) && ((!__isset.firstname) || (global::System.Object.Equals(Firstname, other.Firstname))))
          && ((__isset.lastname == other.__isset.lastname) && ((!__isset.lastname) || (global::System.Object.Equals(Lastname, other.Lastname))))
          && ((__isset.age == other.__isset.age) && ((!__isset.age) || (global::System.Object.Equals(Age, other.Age))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Firstname != null) && __isset.firstname)
          {
            hashcode = (hashcode * 397) + Firstname.GetHashCode();
          }
          if((Lastname != null) && __isset.lastname)
          {
            hashcode = (hashcode * 397) + Lastname.GetHashCode();
          }
          if(__isset.age)
          {
            hashcode = (hashcode * 397) + Age.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp188 = new StringBuilder("SaveChild_args(");
        int tmp189 = 0;
        if((Firstname != null) && __isset.firstname)
        {
          if(0 < tmp189++) { tmp188.Append(", "); }
          tmp188.Append("Firstname: ");
          Firstname.ToString(tmp188);
        }
        if((Lastname != null) && __isset.lastname)
        {
          if(0 < tmp189++) { tmp188.Append(", "); }
          tmp188.Append("Lastname: ");
          Lastname.ToString(tmp188);
        }
        if(__isset.age)
        {
          if(0 < tmp189++) { tmp188.Append(", "); }
          tmp188.Append("Age: ");
          Age.ToString(tmp188);
        }
        tmp188.Append(')');
        return tmp188.ToString();
      }
    }


    public partial class SaveChild_result : TBase
    {
      private Child _success;

      public Child Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SaveChild_result()
      {
      }

      public SaveChild_result DeepCopy()
      {
        var tmp190 = new SaveChild_result();
        if((Success != null) && __isset.success)
        {
          tmp190.Success = (Child)this.Success.DeepCopy();
        }
        tmp190.__isset.success = this.__isset.success;
        return tmp190;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Child();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp191 = new TStruct("SaveChild_result");
          await oprot.WriteStructBeginAsync(tmp191, cancellationToken);
          var tmp192 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp192.Name = "Success";
              tmp192.Type = TType.Struct;
              tmp192.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp192, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is SaveChild_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp193 = new StringBuilder("SaveChild_result(");
        int tmp194 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp194++) { tmp193.Append(", "); }
          tmp193.Append("Success: ");
          Success.ToString(tmp193);
        }
        tmp193.Append(')');
        return tmp193.ToString();
      }
    }


    public partial class findChildrenForRound_args : TBase
    {
      private string _roundName;

      public string RoundName
      {
        get
        {
          return _roundName;
        }
        set
        {
          __isset.roundName = true;
          this._roundName = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool roundName;
      }

      public findChildrenForRound_args()
      {
      }

      public findChildrenForRound_args DeepCopy()
      {
        var tmp195 = new findChildrenForRound_args();
        if((RoundName != null) && __isset.roundName)
        {
          tmp195.RoundName = this.RoundName;
        }
        tmp195.__isset.roundName = this.__isset.roundName;
        return tmp195;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  RoundName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp196 = new TStruct("findChildrenForRound_args");
          await oprot.WriteStructBeginAsync(tmp196, cancellationToken);
          var tmp197 = new TField();
          if((RoundName != null) && __isset.roundName)
          {
            tmp197.Name = "roundName";
            tmp197.Type = TType.String;
            tmp197.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
            await oprot.WriteStringAsync(RoundName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is findChildrenForRound_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.roundName == other.__isset.roundName) && ((!__isset.roundName) || (global::System.Object.Equals(RoundName, other.RoundName))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((RoundName != null) && __isset.roundName)
          {
            hashcode = (hashcode * 397) + RoundName.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp198 = new StringBuilder("findChildrenForRound_args(");
        int tmp199 = 0;
        if((RoundName != null) && __isset.roundName)
        {
          if(0 < tmp199++) { tmp198.Append(", "); }
          tmp198.Append("RoundName: ");
          RoundName.ToString(tmp198);
        }
        tmp198.Append(')');
        return tmp198.ToString();
      }
    }


    public partial class findChildrenForRound_result : TBase
    {
      private List<Child> _success;

      public List<Child> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public findChildrenForRound_result()
      {
      }

      public findChildrenForRound_result DeepCopy()
      {
        var tmp200 = new findChildrenForRound_result();
        if((Success != null) && __isset.success)
        {
          tmp200.Success = this.Success.DeepCopy();
        }
        tmp200.__isset.success = this.__isset.success;
        return tmp200;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list201 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Child>(_list201.Count);
                    for(int _i202 = 0; _i202 < _list201.Count; ++_i202)
                    {
                      Child _elem203;
                      _elem203 = new Child();
                      await _elem203.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem203);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp204 = new TStruct("findChildrenForRound_result");
          await oprot.WriteStructBeginAsync(tmp204, cancellationToken);
          var tmp205 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp205.Name = "Success";
              tmp205.Type = TType.List;
              tmp205.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp205, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Child _iter206 in Success)
                {
                  await _iter206.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is findChildrenForRound_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp207 = new StringBuilder("findChildrenForRound_result(");
        int tmp208 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp208++) { tmp207.Append(", "); }
          tmp207.Append("Success: ");
          Success.ToString(tmp207);
        }
        tmp207.Append(')');
        return tmp207.ToString();
      }
    }


    public partial class FindChildByName_args : TBase
    {
      private string _firstname;
      private string _lastname;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool firstname;
        public bool lastname;
      }

      public FindChildByName_args()
      {
      }

      public FindChildByName_args DeepCopy()
      {
        var tmp209 = new FindChildByName_args();
        if((Firstname != null) && __isset.firstname)
        {
          tmp209.Firstname = this.Firstname;
        }
        tmp209.__isset.firstname = this.__isset.firstname;
        if((Lastname != null) && __isset.lastname)
        {
          tmp209.Lastname = this.Lastname;
        }
        tmp209.__isset.lastname = this.__isset.lastname;
        return tmp209;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Firstname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Lastname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp210 = new TStruct("FindChildByName_args");
          await oprot.WriteStructBeginAsync(tmp210, cancellationToken);
          var tmp211 = new TField();
          if((Firstname != null) && __isset.firstname)
          {
            tmp211.Name = "firstname";
            tmp211.Type = TType.String;
            tmp211.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp211, cancellationToken);
            await oprot.WriteStringAsync(Firstname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Lastname != null) && __isset.lastname)
          {
            tmp211.Name = "lastname";
            tmp211.Type = TType.String;
            tmp211.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp211, cancellationToken);
            await oprot.WriteStringAsync(Lastname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindChildByName_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.firstname == other.__isset.firstname) && ((!__isset.firstname) || (global::System.Object.Equals(Firstname, other.Firstname))))
          && ((__isset.lastname == other.__isset.lastname) && ((!__isset.lastname) || (global::System.Object.Equals(Lastname, other.Lastname))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Firstname != null) && __isset.firstname)
          {
            hashcode = (hashcode * 397) + Firstname.GetHashCode();
          }
          if((Lastname != null) && __isset.lastname)
          {
            hashcode = (hashcode * 397) + Lastname.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp212 = new StringBuilder("FindChildByName_args(");
        int tmp213 = 0;
        if((Firstname != null) && __isset.firstname)
        {
          if(0 < tmp213++) { tmp212.Append(", "); }
          tmp212.Append("Firstname: ");
          Firstname.ToString(tmp212);
        }
        if((Lastname != null) && __isset.lastname)
        {
          if(0 < tmp213++) { tmp212.Append(", "); }
          tmp212.Append("Lastname: ");
          Lastname.ToString(tmp212);
        }
        tmp212.Append(')');
        return tmp212.ToString();
      }
    }


    public partial class FindChildByName_result : TBase
    {
      private Child _success;

      public Child Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public FindChildByName_result()
      {
      }

      public FindChildByName_result DeepCopy()
      {
        var tmp214 = new FindChildByName_result();
        if((Success != null) && __isset.success)
        {
          tmp214.Success = (Child)this.Success.DeepCopy();
        }
        tmp214.__isset.success = this.__isset.success;
        return tmp214;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Child();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp215 = new TStruct("FindChildByName_result");
          await oprot.WriteStructBeginAsync(tmp215, cancellationToken);
          var tmp216 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp216.Name = "Success";
              tmp216.Type = TType.Struct;
              tmp216.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp216, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindChildByName_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp217 = new StringBuilder("FindChildByName_result(");
        int tmp218 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp218++) { tmp217.Append(", "); }
          tmp217.Append("Success: ");
          Success.ToString(tmp217);
        }
        tmp217.Append(')');
        return tmp217.ToString();
      }
    }


    public partial class FindChildrenByAgeGroup_args : TBase
    {
      private string _ageGroup;

      public string AgeGroup
      {
        get
        {
          return _ageGroup;
        }
        set
        {
          __isset.ageGroup = true;
          this._ageGroup = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ageGroup;
      }

      public FindChildrenByAgeGroup_args()
      {
      }

      public FindChildrenByAgeGroup_args DeepCopy()
      {
        var tmp219 = new FindChildrenByAgeGroup_args();
        if((AgeGroup != null) && __isset.ageGroup)
        {
          tmp219.AgeGroup = this.AgeGroup;
        }
        tmp219.__isset.ageGroup = this.__isset.ageGroup;
        return tmp219;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AgeGroup = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp220 = new TStruct("FindChildrenByAgeGroup_args");
          await oprot.WriteStructBeginAsync(tmp220, cancellationToken);
          var tmp221 = new TField();
          if((AgeGroup != null) && __isset.ageGroup)
          {
            tmp221.Name = "ageGroup";
            tmp221.Type = TType.String;
            tmp221.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp221, cancellationToken);
            await oprot.WriteStringAsync(AgeGroup, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindChildrenByAgeGroup_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ageGroup == other.__isset.ageGroup) && ((!__isset.ageGroup) || (global::System.Object.Equals(AgeGroup, other.AgeGroup))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((AgeGroup != null) && __isset.ageGroup)
          {
            hashcode = (hashcode * 397) + AgeGroup.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp222 = new StringBuilder("FindChildrenByAgeGroup_args(");
        int tmp223 = 0;
        if((AgeGroup != null) && __isset.ageGroup)
        {
          if(0 < tmp223++) { tmp222.Append(", "); }
          tmp222.Append("AgeGroup: ");
          AgeGroup.ToString(tmp222);
        }
        tmp222.Append(')');
        return tmp222.ToString();
      }
    }


    public partial class FindChildrenByAgeGroup_result : TBase
    {
      private List<Child> _success;

      public List<Child> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public FindChildrenByAgeGroup_result()
      {
      }

      public FindChildrenByAgeGroup_result DeepCopy()
      {
        var tmp224 = new FindChildrenByAgeGroup_result();
        if((Success != null) && __isset.success)
        {
          tmp224.Success = this.Success.DeepCopy();
        }
        tmp224.__isset.success = this.__isset.success;
        return tmp224;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list225 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Child>(_list225.Count);
                    for(int _i226 = 0; _i226 < _list225.Count; ++_i226)
                    {
                      Child _elem227;
                      _elem227 = new Child();
                      await _elem227.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem227);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp228 = new TStruct("FindChildrenByAgeGroup_result");
          await oprot.WriteStructBeginAsync(tmp228, cancellationToken);
          var tmp229 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp229.Name = "Success";
              tmp229.Type = TType.List;
              tmp229.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp229, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Child _iter230 in Success)
                {
                  await _iter230.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindChildrenByAgeGroup_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp231 = new StringBuilder("FindChildrenByAgeGroup_result(");
        int tmp232 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp232++) { tmp231.Append(", "); }
          tmp231.Append("Success: ");
          Success.ToString(tmp231);
        }
        tmp231.Append(')');
        return tmp231.ToString();
      }
    }


    public partial class SaveEnrollment_args : TBase
    {
      private string _firstname;
      private string _lastname;
      private int _age;
      private string _roundName;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }

      public int Age
      {
        get
        {
          return _age;
        }
        set
        {
          __isset.age = true;
          this._age = value;
        }
      }

      public string RoundName
      {
        get
        {
          return _roundName;
        }
        set
        {
          __isset.roundName = true;
          this._roundName = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool firstname;
        public bool lastname;
        public bool age;
        public bool roundName;
      }

      public SaveEnrollment_args()
      {
      }

      public SaveEnrollment_args DeepCopy()
      {
        var tmp233 = new SaveEnrollment_args();
        if((Firstname != null) && __isset.firstname)
        {
          tmp233.Firstname = this.Firstname;
        }
        tmp233.__isset.firstname = this.__isset.firstname;
        if((Lastname != null) && __isset.lastname)
        {
          tmp233.Lastname = this.Lastname;
        }
        tmp233.__isset.lastname = this.__isset.lastname;
        if(__isset.age)
        {
          tmp233.Age = this.Age;
        }
        tmp233.__isset.age = this.__isset.age;
        if((RoundName != null) && __isset.roundName)
        {
          tmp233.RoundName = this.RoundName;
        }
        tmp233.__isset.roundName = this.__isset.roundName;
        return tmp233;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Firstname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Lastname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Age = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.String)
                {
                  RoundName = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp234 = new TStruct("SaveEnrollment_args");
          await oprot.WriteStructBeginAsync(tmp234, cancellationToken);
          var tmp235 = new TField();
          if((Firstname != null) && __isset.firstname)
          {
            tmp235.Name = "firstname";
            tmp235.Type = TType.String;
            tmp235.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
            await oprot.WriteStringAsync(Firstname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Lastname != null) && __isset.lastname)
          {
            tmp235.Name = "lastname";
            tmp235.Type = TType.String;
            tmp235.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
            await oprot.WriteStringAsync(Lastname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.age)
          {
            tmp235.Name = "age";
            tmp235.Type = TType.I32;
            tmp235.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
            await oprot.WriteI32Async(Age, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((RoundName != null) && __isset.roundName)
          {
            tmp235.Name = "roundName";
            tmp235.Type = TType.String;
            tmp235.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp235, cancellationToken);
            await oprot.WriteStringAsync(RoundName, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is SaveEnrollment_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.firstname == other.__isset.firstname) && ((!__isset.firstname) || (global::System.Object.Equals(Firstname, other.Firstname))))
          && ((__isset.lastname == other.__isset.lastname) && ((!__isset.lastname) || (global::System.Object.Equals(Lastname, other.Lastname))))
          && ((__isset.age == other.__isset.age) && ((!__isset.age) || (global::System.Object.Equals(Age, other.Age))))
          && ((__isset.roundName == other.__isset.roundName) && ((!__isset.roundName) || (global::System.Object.Equals(RoundName, other.RoundName))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Firstname != null) && __isset.firstname)
          {
            hashcode = (hashcode * 397) + Firstname.GetHashCode();
          }
          if((Lastname != null) && __isset.lastname)
          {
            hashcode = (hashcode * 397) + Lastname.GetHashCode();
          }
          if(__isset.age)
          {
            hashcode = (hashcode * 397) + Age.GetHashCode();
          }
          if((RoundName != null) && __isset.roundName)
          {
            hashcode = (hashcode * 397) + RoundName.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp236 = new StringBuilder("SaveEnrollment_args(");
        int tmp237 = 0;
        if((Firstname != null) && __isset.firstname)
        {
          if(0 < tmp237++) { tmp236.Append(", "); }
          tmp236.Append("Firstname: ");
          Firstname.ToString(tmp236);
        }
        if((Lastname != null) && __isset.lastname)
        {
          if(0 < tmp237++) { tmp236.Append(", "); }
          tmp236.Append("Lastname: ");
          Lastname.ToString(tmp236);
        }
        if(__isset.age)
        {
          if(0 < tmp237++) { tmp236.Append(", "); }
          tmp236.Append("Age: ");
          Age.ToString(tmp236);
        }
        if((RoundName != null) && __isset.roundName)
        {
          if(0 < tmp237++) { tmp236.Append(", "); }
          tmp236.Append("RoundName: ");
          RoundName.ToString(tmp236);
        }
        tmp236.Append(')');
        return tmp236.ToString();
      }
    }


    public partial class SaveEnrollment_result : TBase
    {
      private Enrollment _success;

      public Enrollment Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public SaveEnrollment_result()
      {
      }

      public SaveEnrollment_result DeepCopy()
      {
        var tmp238 = new SaveEnrollment_result();
        if((Success != null) && __isset.success)
        {
          tmp238.Success = (Enrollment)this.Success.DeepCopy();
        }
        tmp238.__isset.success = this.__isset.success;
        return tmp238;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Enrollment();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp239 = new TStruct("SaveEnrollment_result");
          await oprot.WriteStructBeginAsync(tmp239, cancellationToken);
          var tmp240 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp240.Name = "Success";
              tmp240.Type = TType.Struct;
              tmp240.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is SaveEnrollment_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp241 = new StringBuilder("SaveEnrollment_result(");
        int tmp242 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp242++) { tmp241.Append(", "); }
          tmp241.Append("Success: ");
          Success.ToString(tmp241);
        }
        tmp241.Append(')');
        return tmp241.ToString();
      }
    }


    public partial class FindNumberOfEnrollmentsForChild_args : TBase
    {
      private string _firstname;
      private string _lastname;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool firstname;
        public bool lastname;
      }

      public FindNumberOfEnrollmentsForChild_args()
      {
      }

      public FindNumberOfEnrollmentsForChild_args DeepCopy()
      {
        var tmp243 = new FindNumberOfEnrollmentsForChild_args();
        if((Firstname != null) && __isset.firstname)
        {
          tmp243.Firstname = this.Firstname;
        }
        tmp243.__isset.firstname = this.__isset.firstname;
        if((Lastname != null) && __isset.lastname)
        {
          tmp243.Lastname = this.Lastname;
        }
        tmp243.__isset.lastname = this.__isset.lastname;
        return tmp243;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Firstname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Lastname = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp244 = new TStruct("FindNumberOfEnrollmentsForChild_args");
          await oprot.WriteStructBeginAsync(tmp244, cancellationToken);
          var tmp245 = new TField();
          if((Firstname != null) && __isset.firstname)
          {
            tmp245.Name = "firstname";
            tmp245.Type = TType.String;
            tmp245.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
            await oprot.WriteStringAsync(Firstname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Lastname != null) && __isset.lastname)
          {
            tmp245.Name = "lastname";
            tmp245.Type = TType.String;
            tmp245.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp245, cancellationToken);
            await oprot.WriteStringAsync(Lastname, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindNumberOfEnrollmentsForChild_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.firstname == other.__isset.firstname) && ((!__isset.firstname) || (global::System.Object.Equals(Firstname, other.Firstname))))
          && ((__isset.lastname == other.__isset.lastname) && ((!__isset.lastname) || (global::System.Object.Equals(Lastname, other.Lastname))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Firstname != null) && __isset.firstname)
          {
            hashcode = (hashcode * 397) + Firstname.GetHashCode();
          }
          if((Lastname != null) && __isset.lastname)
          {
            hashcode = (hashcode * 397) + Lastname.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp246 = new StringBuilder("FindNumberOfEnrollmentsForChild_args(");
        int tmp247 = 0;
        if((Firstname != null) && __isset.firstname)
        {
          if(0 < tmp247++) { tmp246.Append(", "); }
          tmp246.Append("Firstname: ");
          Firstname.ToString(tmp246);
        }
        if((Lastname != null) && __isset.lastname)
        {
          if(0 < tmp247++) { tmp246.Append(", "); }
          tmp246.Append("Lastname: ");
          Lastname.ToString(tmp246);
        }
        tmp246.Append(')');
        return tmp246.ToString();
      }
    }


    public partial class FindNumberOfEnrollmentsForChild_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public FindNumberOfEnrollmentsForChild_result()
      {
      }

      public FindNumberOfEnrollmentsForChild_result DeepCopy()
      {
        var tmp248 = new FindNumberOfEnrollmentsForChild_result();
        if(__isset.success)
        {
          tmp248.Success = this.Success;
        }
        tmp248.__isset.success = this.__isset.success;
        return tmp248;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp249 = new TStruct("FindNumberOfEnrollmentsForChild_result");
          await oprot.WriteStructBeginAsync(tmp249, cancellationToken);
          var tmp250 = new TField();

          if(this.__isset.success)
          {
            tmp250.Name = "Success";
            tmp250.Type = TType.I64;
            tmp250.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp250, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FindNumberOfEnrollmentsForChild_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp251 = new StringBuilder("FindNumberOfEnrollmentsForChild_result(");
        int tmp252 = 0;
        if(__isset.success)
        {
          if(0 < tmp252++) { tmp251.Append(", "); }
          tmp251.Append("Success: ");
          Success.ToString(tmp251);
        }
        tmp251.Append(')');
        return tmp251.ToString();
      }
    }

  }

}
