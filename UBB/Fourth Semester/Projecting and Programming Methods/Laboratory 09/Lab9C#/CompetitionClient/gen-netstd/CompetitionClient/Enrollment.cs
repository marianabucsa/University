/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CompetitionClient
{

  public partial class Enrollment : TBase
  {

    public global::CompetitionClient.Child Child { get; set; }

    public global::CompetitionClient.Round Round { get; set; }

    public Enrollment()
    {
    }

    public Enrollment(global::CompetitionClient.Child child, global::CompetitionClient.Round round) : this()
    {
      this.Child = child;
      this.Round = round;
    }

    public Enrollment DeepCopy()
    {
      var tmp20 = new Enrollment();
      if((Child != null))
      {
        tmp20.Child = (global::CompetitionClient.Child)this.Child.DeepCopy();
      }
      if((Round != null))
      {
        tmp20.Round = (global::CompetitionClient.Round)this.Round.DeepCopy();
      }
      return tmp20;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_child = false;
        bool isset_round = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Child = new global::CompetitionClient.Child();
                await Child.ReadAsync(iprot, cancellationToken);
                isset_child = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Round = new global::CompetitionClient.Round();
                await Round.ReadAsync(iprot, cancellationToken);
                isset_round = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_child)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_round)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp21 = new TStruct("Enrollment");
        await oprot.WriteStructBeginAsync(tmp21, cancellationToken);
        var tmp22 = new TField();
        if((Child != null))
        {
          tmp22.Name = "child";
          tmp22.Type = TType.Struct;
          tmp22.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await Child.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Round != null))
        {
          tmp22.Name = "round";
          tmp22.Type = TType.Struct;
          tmp22.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await Round.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Enrollment other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Child, other.Child)
        && global::System.Object.Equals(Round, other.Round);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Child != null))
        {
          hashcode = (hashcode * 397) + Child.GetHashCode();
        }
        if((Round != null))
        {
          hashcode = (hashcode * 397) + Round.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp23 = new StringBuilder("Enrollment(");
      if((Child != null))
      {
        tmp23.Append(", Child: ");
        Child.ToString(tmp23);
      }
      if((Round != null))
      {
        tmp23.Append(", Round: ");
        Round.ToString(tmp23);
      }
      tmp23.Append(')');
      return tmp23.ToString();
    }
  }

}
