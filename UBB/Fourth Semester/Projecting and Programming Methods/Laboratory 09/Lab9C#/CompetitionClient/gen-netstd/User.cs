/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class User : TBase
{

  public long Id { get; set; }

  public string FirstName { get; set; }

  public string LastName { get; set; }

  public string Username { get; set; }

  public string Password { get; set; }

  public User()
  {
  }

  public User(long id, string firstName, string lastName, string username, string password) : this()
  {
    this.Id = id;
    this.FirstName = firstName;
    this.LastName = lastName;
    this.Username = username;
    this.Password = password;
  }

  public User DeepCopy()
  {
    var tmp5 = new User();
    tmp5.Id = this.Id;
    if((FirstName != null))
    {
      tmp5.FirstName = this.FirstName;
    }
    if((LastName != null))
    {
      tmp5.LastName = this.LastName;
    }
    if((Username != null))
    {
      tmp5.Username = this.Username;
    }
    if((Password != null))
    {
      tmp5.Password = this.Password;
    }
    return tmp5;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_id = false;
      bool isset_firstName = false;
      bool isset_lastName = false;
      bool isset_username = false;
      bool isset_password = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Id = await iprot.ReadI64Async(cancellationToken);
              isset_id = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              FirstName = await iprot.ReadStringAsync(cancellationToken);
              isset_firstName = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              LastName = await iprot.ReadStringAsync(cancellationToken);
              isset_lastName = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Username = await iprot.ReadStringAsync(cancellationToken);
              isset_username = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
              isset_password = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_id)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_firstName)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_lastName)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_username)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_password)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp6 = new TStruct("User");
      await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
      var tmp7 = new TField();
      tmp7.Name = "id";
      tmp7.Type = TType.I64;
      tmp7.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
      await oprot.WriteI64Async(Id, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((FirstName != null))
      {
        tmp7.Name = "firstName";
        tmp7.Type = TType.String;
        tmp7.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(FirstName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((LastName != null))
      {
        tmp7.Name = "lastName";
        tmp7.Type = TType.String;
        tmp7.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(LastName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Username != null))
      {
        tmp7.Name = "username";
        tmp7.Type = TType.String;
        tmp7.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(Username, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Password != null))
      {
        tmp7.Name = "password";
        tmp7.Type = TType.String;
        tmp7.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is User other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(Id, other.Id)
      && global::System.Object.Equals(FirstName, other.FirstName)
      && global::System.Object.Equals(LastName, other.LastName)
      && global::System.Object.Equals(Username, other.Username)
      && global::System.Object.Equals(Password, other.Password);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + Id.GetHashCode();
      if((FirstName != null))
      {
        hashcode = (hashcode * 397) + FirstName.GetHashCode();
      }
      if((LastName != null))
      {
        hashcode = (hashcode * 397) + LastName.GetHashCode();
      }
      if((Username != null))
      {
        hashcode = (hashcode * 397) + Username.GetHashCode();
      }
      if((Password != null))
      {
        hashcode = (hashcode * 397) + Password.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp8 = new StringBuilder("User(");
    tmp8.Append(", Id: ");
    Id.ToString(tmp8);
    if((FirstName != null))
    {
      tmp8.Append(", FirstName: ");
      FirstName.ToString(tmp8);
    }
    if((LastName != null))
    {
      tmp8.Append(", LastName: ");
      LastName.ToString(tmp8);
    }
    if((Username != null))
    {
      tmp8.Append(", Username: ");
      Username.ToString(tmp8);
    }
    if((Password != null))
    {
      tmp8.Append(", Password: ");
      Password.ToString(tmp8);
    }
    tmp8.Append(')');
    return tmp8.ToString();
  }
}

