/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CompetitionClient
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class User : TBase
  {

    public long Id { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }

    public string Username { get; set; }

    public string Password { get; set; }

    public bool IsNull { get; set; }

    public User() {
      this.IsNull = false;
    }

    public User(long id, string firstName, string lastName, string username, string password, bool isNull) : this() {
      this.Id = id;
      this.FirstName = firstName;
      this.LastName = lastName;
      this.Username = username;
      this.Password = password;
      this.IsNull = isNull;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        bool isset_firstName = false;
        bool isset_lastName = false;
        bool isset_username = false;
        bool isset_password = false;
        bool isset_isNull = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
                isset_id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FirstName = iprot.ReadString();
                isset_firstName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LastName = iprot.ReadString();
                isset_lastName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
                isset_username = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
                isset_password = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                IsNull = iprot.ReadBool();
                isset_isNull = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_id)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Id not set");
        if (!isset_firstName)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FirstName not set");
        if (!isset_lastName)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field LastName not set");
        if (!isset_username)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Username not set");
        if (!isset_password)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Password not set");
        if (!isset_isNull)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsNull not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("User");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
        if (FirstName == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FirstName not set");
        field.Name = "firstName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FirstName);
        oprot.WriteFieldEnd();
        if (LastName == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field LastName not set");
        field.Name = "lastName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastName);
        oprot.WriteFieldEnd();
        if (Username == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Username not set");
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Username);
        oprot.WriteFieldEnd();
        if (Password == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Password not set");
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
        field.Name = "isNull";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsNull);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("User(");
      __sb.Append(", Id: ");
      __sb.Append(Id);
      __sb.Append(", FirstName: ");
      __sb.Append(FirstName);
      __sb.Append(", LastName: ");
      __sb.Append(LastName);
      __sb.Append(", Username: ");
      __sb.Append(Username);
      __sb.Append(", Password: ");
      __sb.Append(Password);
      __sb.Append(", IsNull: ");
      __sb.Append(IsNull);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
