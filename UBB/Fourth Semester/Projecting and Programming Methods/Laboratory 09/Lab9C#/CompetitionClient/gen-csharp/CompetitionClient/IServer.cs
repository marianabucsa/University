/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CompetitionClient
{
  public partial class IServer {
    public interface ISync {
      void logout(User u);
      int login(string username, string password);
      long getNrChildrenForRound(string name);
      List<Round> findAllRounds();
      Enrollment FindEnrollmentByChildAndRound(string firstname, string lastname, string roundName);
      Child SaveChild(string firstname, string lastname, int age);
      List<Child> findChildrenForRound(string roundName);
      Child FindChildByName(string firstname, string lastname);
      List<Child> FindChildrenByAgeGroup(string ageGroup);
      Enrollment SaveEnrollment(string firstname, string lastname, int age, string roundName);
      long FindNumberOfEnrollmentsForChild(string firstname, string lastname);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state, User u);
      void End_logout(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, string username, string password);
      int End_login(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getNrChildrenForRound(AsyncCallback callback, object state, string name);
      long End_getNrChildrenForRound(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findAllRounds(AsyncCallback callback, object state);
      List<Round> End_findAllRounds(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_FindEnrollmentByChildAndRound(AsyncCallback callback, object state, string firstname, string lastname, string roundName);
      Enrollment End_FindEnrollmentByChildAndRound(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SaveChild(AsyncCallback callback, object state, string firstname, string lastname, int age);
      Child End_SaveChild(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findChildrenForRound(AsyncCallback callback, object state, string roundName);
      List<Child> End_findChildrenForRound(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_FindChildByName(AsyncCallback callback, object state, string firstname, string lastname);
      Child End_FindChildByName(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_FindChildrenByAgeGroup(AsyncCallback callback, object state, string ageGroup);
      List<Child> End_FindChildrenByAgeGroup(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SaveEnrollment(AsyncCallback callback, object state, string firstname, string lastname, int age, string roundName);
      Enrollment End_SaveEnrollment(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_FindNumberOfEnrollmentsForChild(AsyncCallback callback, object state, string firstname, string lastname);
      long End_FindNumberOfEnrollmentsForChild(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_logout(AsyncCallback callback, object state, User u)
      {
        return send_logout(callback, state, u);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout(User u)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_logout(null, null, u);
        End_logout(asyncResult);

        #else
        send_logout(u);
        recv_logout();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state, User u)
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.U = u;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_logout(User u)
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.U = u;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_login(AsyncCallback callback, object state, string username, string password)
      {
        return send_login(callback, state, username, password);
      }

      public int End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      public int login(string username, string password)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_login(null, null, username, password);
        return End_login(asyncResult);

        #else
        send_login(username, password);
        return recv_login();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, string username, string password)
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Username = username;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_login(string username, string password)
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Username = username;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public int recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getNrChildrenForRound(AsyncCallback callback, object state, string name)
      {
        return send_getNrChildrenForRound(callback, state, name);
      }

      public long End_getNrChildrenForRound(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNrChildrenForRound();
      }

      #endif

      public long getNrChildrenForRound(string name)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getNrChildrenForRound(null, null, name);
        return End_getNrChildrenForRound(asyncResult);

        #else
        send_getNrChildrenForRound(name);
        return recv_getNrChildrenForRound();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNrChildrenForRound(AsyncCallback callback, object state, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("getNrChildrenForRound", TMessageType.Call, seqid_));
        getNrChildrenForRound_args args = new getNrChildrenForRound_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getNrChildrenForRound(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("getNrChildrenForRound", TMessageType.Call, seqid_));
        getNrChildrenForRound_args args = new getNrChildrenForRound_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public long recv_getNrChildrenForRound()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNrChildrenForRound_result result = new getNrChildrenForRound_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNrChildrenForRound failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findAllRounds(AsyncCallback callback, object state)
      {
        return send_findAllRounds(callback, state);
      }

      public List<Round> End_findAllRounds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAllRounds();
      }

      #endif

      public List<Round> findAllRounds()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findAllRounds(null, null);
        return End_findAllRounds(asyncResult);

        #else
        send_findAllRounds();
        return recv_findAllRounds();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAllRounds(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("findAllRounds", TMessageType.Call, seqid_));
        findAllRounds_args args = new findAllRounds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findAllRounds()
      {
        oprot_.WriteMessageBegin(new TMessage("findAllRounds", TMessageType.Call, seqid_));
        findAllRounds_args args = new findAllRounds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<Round> recv_findAllRounds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAllRounds_result result = new findAllRounds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllRounds failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_FindEnrollmentByChildAndRound(AsyncCallback callback, object state, string firstname, string lastname, string roundName)
      {
        return send_FindEnrollmentByChildAndRound(callback, state, firstname, lastname, roundName);
      }

      public Enrollment End_FindEnrollmentByChildAndRound(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindEnrollmentByChildAndRound();
      }

      #endif

      public Enrollment FindEnrollmentByChildAndRound(string firstname, string lastname, string roundName)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_FindEnrollmentByChildAndRound(null, null, firstname, lastname, roundName);
        return End_FindEnrollmentByChildAndRound(asyncResult);

        #else
        send_FindEnrollmentByChildAndRound(firstname, lastname, roundName);
        return recv_FindEnrollmentByChildAndRound();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindEnrollmentByChildAndRound(AsyncCallback callback, object state, string firstname, string lastname, string roundName)
      {
        oprot_.WriteMessageBegin(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Call, seqid_));
        FindEnrollmentByChildAndRound_args args = new FindEnrollmentByChildAndRound_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.RoundName = roundName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_FindEnrollmentByChildAndRound(string firstname, string lastname, string roundName)
      {
        oprot_.WriteMessageBegin(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Call, seqid_));
        FindEnrollmentByChildAndRound_args args = new FindEnrollmentByChildAndRound_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.RoundName = roundName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Enrollment recv_FindEnrollmentByChildAndRound()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindEnrollmentByChildAndRound_result result = new FindEnrollmentByChildAndRound_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindEnrollmentByChildAndRound failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SaveChild(AsyncCallback callback, object state, string firstname, string lastname, int age)
      {
        return send_SaveChild(callback, state, firstname, lastname, age);
      }

      public Child End_SaveChild(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SaveChild();
      }

      #endif

      public Child SaveChild(string firstname, string lastname, int age)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SaveChild(null, null, firstname, lastname, age);
        return End_SaveChild(asyncResult);

        #else
        send_SaveChild(firstname, lastname, age);
        return recv_SaveChild();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SaveChild(AsyncCallback callback, object state, string firstname, string lastname, int age)
      {
        oprot_.WriteMessageBegin(new TMessage("SaveChild", TMessageType.Call, seqid_));
        SaveChild_args args = new SaveChild_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Age = age;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SaveChild(string firstname, string lastname, int age)
      {
        oprot_.WriteMessageBegin(new TMessage("SaveChild", TMessageType.Call, seqid_));
        SaveChild_args args = new SaveChild_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Age = age;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Child recv_SaveChild()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SaveChild_result result = new SaveChild_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveChild failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findChildrenForRound(AsyncCallback callback, object state, string roundName)
      {
        return send_findChildrenForRound(callback, state, roundName);
      }

      public List<Child> End_findChildrenForRound(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findChildrenForRound();
      }

      #endif

      public List<Child> findChildrenForRound(string roundName)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findChildrenForRound(null, null, roundName);
        return End_findChildrenForRound(asyncResult);

        #else
        send_findChildrenForRound(roundName);
        return recv_findChildrenForRound();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findChildrenForRound(AsyncCallback callback, object state, string roundName)
      {
        oprot_.WriteMessageBegin(new TMessage("findChildrenForRound", TMessageType.Call, seqid_));
        findChildrenForRound_args args = new findChildrenForRound_args();
        args.RoundName = roundName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findChildrenForRound(string roundName)
      {
        oprot_.WriteMessageBegin(new TMessage("findChildrenForRound", TMessageType.Call, seqid_));
        findChildrenForRound_args args = new findChildrenForRound_args();
        args.RoundName = roundName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<Child> recv_findChildrenForRound()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findChildrenForRound_result result = new findChildrenForRound_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findChildrenForRound failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_FindChildByName(AsyncCallback callback, object state, string firstname, string lastname)
      {
        return send_FindChildByName(callback, state, firstname, lastname);
      }

      public Child End_FindChildByName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindChildByName();
      }

      #endif

      public Child FindChildByName(string firstname, string lastname)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_FindChildByName(null, null, firstname, lastname);
        return End_FindChildByName(asyncResult);

        #else
        send_FindChildByName(firstname, lastname);
        return recv_FindChildByName();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindChildByName(AsyncCallback callback, object state, string firstname, string lastname)
      {
        oprot_.WriteMessageBegin(new TMessage("FindChildByName", TMessageType.Call, seqid_));
        FindChildByName_args args = new FindChildByName_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_FindChildByName(string firstname, string lastname)
      {
        oprot_.WriteMessageBegin(new TMessage("FindChildByName", TMessageType.Call, seqid_));
        FindChildByName_args args = new FindChildByName_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Child recv_FindChildByName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindChildByName_result result = new FindChildByName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindChildByName failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_FindChildrenByAgeGroup(AsyncCallback callback, object state, string ageGroup)
      {
        return send_FindChildrenByAgeGroup(callback, state, ageGroup);
      }

      public List<Child> End_FindChildrenByAgeGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindChildrenByAgeGroup();
      }

      #endif

      public List<Child> FindChildrenByAgeGroup(string ageGroup)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_FindChildrenByAgeGroup(null, null, ageGroup);
        return End_FindChildrenByAgeGroup(asyncResult);

        #else
        send_FindChildrenByAgeGroup(ageGroup);
        return recv_FindChildrenByAgeGroup();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindChildrenByAgeGroup(AsyncCallback callback, object state, string ageGroup)
      {
        oprot_.WriteMessageBegin(new TMessage("FindChildrenByAgeGroup", TMessageType.Call, seqid_));
        FindChildrenByAgeGroup_args args = new FindChildrenByAgeGroup_args();
        args.AgeGroup = ageGroup;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_FindChildrenByAgeGroup(string ageGroup)
      {
        oprot_.WriteMessageBegin(new TMessage("FindChildrenByAgeGroup", TMessageType.Call, seqid_));
        FindChildrenByAgeGroup_args args = new FindChildrenByAgeGroup_args();
        args.AgeGroup = ageGroup;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<Child> recv_FindChildrenByAgeGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindChildrenByAgeGroup_result result = new FindChildrenByAgeGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindChildrenByAgeGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SaveEnrollment(AsyncCallback callback, object state, string firstname, string lastname, int age, string roundName)
      {
        return send_SaveEnrollment(callback, state, firstname, lastname, age, roundName);
      }

      public Enrollment End_SaveEnrollment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SaveEnrollment();
      }

      #endif

      public Enrollment SaveEnrollment(string firstname, string lastname, int age, string roundName)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SaveEnrollment(null, null, firstname, lastname, age, roundName);
        return End_SaveEnrollment(asyncResult);

        #else
        send_SaveEnrollment(firstname, lastname, age, roundName);
        return recv_SaveEnrollment();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SaveEnrollment(AsyncCallback callback, object state, string firstname, string lastname, int age, string roundName)
      {
        oprot_.WriteMessageBegin(new TMessage("SaveEnrollment", TMessageType.Call, seqid_));
        SaveEnrollment_args args = new SaveEnrollment_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Age = age;
        args.RoundName = roundName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SaveEnrollment(string firstname, string lastname, int age, string roundName)
      {
        oprot_.WriteMessageBegin(new TMessage("SaveEnrollment", TMessageType.Call, seqid_));
        SaveEnrollment_args args = new SaveEnrollment_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Age = age;
        args.RoundName = roundName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Enrollment recv_SaveEnrollment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SaveEnrollment_result result = new SaveEnrollment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveEnrollment failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_FindNumberOfEnrollmentsForChild(AsyncCallback callback, object state, string firstname, string lastname)
      {
        return send_FindNumberOfEnrollmentsForChild(callback, state, firstname, lastname);
      }

      public long End_FindNumberOfEnrollmentsForChild(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindNumberOfEnrollmentsForChild();
      }

      #endif

      public long FindNumberOfEnrollmentsForChild(string firstname, string lastname)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_FindNumberOfEnrollmentsForChild(null, null, firstname, lastname);
        return End_FindNumberOfEnrollmentsForChild(asyncResult);

        #else
        send_FindNumberOfEnrollmentsForChild(firstname, lastname);
        return recv_FindNumberOfEnrollmentsForChild();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindNumberOfEnrollmentsForChild(AsyncCallback callback, object state, string firstname, string lastname)
      {
        oprot_.WriteMessageBegin(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Call, seqid_));
        FindNumberOfEnrollmentsForChild_args args = new FindNumberOfEnrollmentsForChild_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_FindNumberOfEnrollmentsForChild(string firstname, string lastname)
      {
        oprot_.WriteMessageBegin(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Call, seqid_));
        FindNumberOfEnrollmentsForChild_args args = new FindNumberOfEnrollmentsForChild_args();
        args.Firstname = firstname;
        args.Lastname = lastname;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public long recv_FindNumberOfEnrollmentsForChild()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindNumberOfEnrollmentsForChild_result result = new FindNumberOfEnrollmentsForChild_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindNumberOfEnrollmentsForChild failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["logout"] = logout_Process;
        processMap_["login"] = login_Process;
        processMap_["getNrChildrenForRound"] = getNrChildrenForRound_Process;
        processMap_["findAllRounds"] = findAllRounds_Process;
        processMap_["FindEnrollmentByChildAndRound"] = FindEnrollmentByChildAndRound_Process;
        processMap_["SaveChild"] = SaveChild_Process;
        processMap_["findChildrenForRound"] = findChildrenForRound_Process;
        processMap_["FindChildByName"] = FindChildByName_Process;
        processMap_["FindChildrenByAgeGroup"] = FindChildrenByAgeGroup_Process;
        processMap_["SaveEnrollment"] = SaveEnrollment_Process;
        processMap_["FindNumberOfEnrollmentsForChild"] = FindNumberOfEnrollmentsForChild_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        try
        {
          iface_.logout(args.U);
          oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try
        {
          result.Success = iface_.login(args.Username, args.Password);
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNrChildrenForRound_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNrChildrenForRound_args args = new getNrChildrenForRound_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNrChildrenForRound_result result = new getNrChildrenForRound_result();
        try
        {
          result.Success = iface_.getNrChildrenForRound(args.Name);
          oprot.WriteMessageBegin(new TMessage("getNrChildrenForRound", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getNrChildrenForRound", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAllRounds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAllRounds_args args = new findAllRounds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAllRounds_result result = new findAllRounds_result();
        try
        {
          result.Success = iface_.findAllRounds();
          oprot.WriteMessageBegin(new TMessage("findAllRounds", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findAllRounds", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindEnrollmentByChildAndRound_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindEnrollmentByChildAndRound_args args = new FindEnrollmentByChildAndRound_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindEnrollmentByChildAndRound_result result = new FindEnrollmentByChildAndRound_result();
        try
        {
          result.Success = iface_.FindEnrollmentByChildAndRound(args.Firstname, args.Lastname, args.RoundName);
          oprot.WriteMessageBegin(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("FindEnrollmentByChildAndRound", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SaveChild_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SaveChild_args args = new SaveChild_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SaveChild_result result = new SaveChild_result();
        try
        {
          result.Success = iface_.SaveChild(args.Firstname, args.Lastname, args.Age);
          oprot.WriteMessageBegin(new TMessage("SaveChild", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SaveChild", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findChildrenForRound_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findChildrenForRound_args args = new findChildrenForRound_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findChildrenForRound_result result = new findChildrenForRound_result();
        try
        {
          result.Success = iface_.findChildrenForRound(args.RoundName);
          oprot.WriteMessageBegin(new TMessage("findChildrenForRound", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findChildrenForRound", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindChildByName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindChildByName_args args = new FindChildByName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindChildByName_result result = new FindChildByName_result();
        try
        {
          result.Success = iface_.FindChildByName(args.Firstname, args.Lastname);
          oprot.WriteMessageBegin(new TMessage("FindChildByName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("FindChildByName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindChildrenByAgeGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindChildrenByAgeGroup_args args = new FindChildrenByAgeGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindChildrenByAgeGroup_result result = new FindChildrenByAgeGroup_result();
        try
        {
          result.Success = iface_.FindChildrenByAgeGroup(args.AgeGroup);
          oprot.WriteMessageBegin(new TMessage("FindChildrenByAgeGroup", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("FindChildrenByAgeGroup", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SaveEnrollment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SaveEnrollment_args args = new SaveEnrollment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SaveEnrollment_result result = new SaveEnrollment_result();
        try
        {
          result.Success = iface_.SaveEnrollment(args.Firstname, args.Lastname, args.Age, args.RoundName);
          oprot.WriteMessageBegin(new TMessage("SaveEnrollment", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SaveEnrollment", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindNumberOfEnrollmentsForChild_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindNumberOfEnrollmentsForChild_args args = new FindNumberOfEnrollmentsForChild_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindNumberOfEnrollmentsForChild_result result = new FindNumberOfEnrollmentsForChild_result();
        try
        {
          result.Success = iface_.FindNumberOfEnrollmentsForChild(args.Firstname, args.Lastname);
          oprot.WriteMessageBegin(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("FindNumberOfEnrollmentsForChild", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase
    {
      private User _u;

      public User U
      {
        get
        {
          return _u;
        }
        set
        {
          __isset.u = true;
          this._u = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool u;
      }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  U = new User();
                  U.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (U != null && __isset.u) {
            field.Name = "u";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            U.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_args(");
        bool __first = true;
        if (U != null && __isset.u) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("U: ");
          __sb.Append(U== null ? "<null>" : U.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase
    {

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase
    {
      private string _username;
      private string _password;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool password;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Username = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Username != null && __isset.username) {
            field.Name = "username";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Username);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNrChildrenForRound_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public getNrChildrenForRound_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNrChildrenForRound_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNrChildrenForRound_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNrChildrenForRound_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getNrChildrenForRound_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getNrChildrenForRound_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNrChildrenForRound_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAllRounds_args : TBase
    {

      public findAllRounds_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAllRounds_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAllRounds_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAllRounds_result : TBase
    {
      private List<Round> _success;

      public List<Round> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findAllRounds_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Round>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Round _elem2;
                      _elem2 = new Round();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAllRounds_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Round _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAllRounds_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindEnrollmentByChildAndRound_args : TBase
    {
      private string _firstname;
      private string _lastname;
      private string _roundName;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }

      public string RoundName
      {
        get
        {
          return _roundName;
        }
        set
        {
          __isset.roundName = true;
          this._roundName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstname;
        public bool lastname;
        public bool roundName;
      }

      public FindEnrollmentByChildAndRound_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Firstname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Lastname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  RoundName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindEnrollmentByChildAndRound_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Firstname != null && __isset.firstname) {
            field.Name = "firstname";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Firstname);
            oprot.WriteFieldEnd();
          }
          if (Lastname != null && __isset.lastname) {
            field.Name = "lastname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lastname);
            oprot.WriteFieldEnd();
          }
          if (RoundName != null && __isset.roundName) {
            field.Name = "roundName";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RoundName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindEnrollmentByChildAndRound_args(");
        bool __first = true;
        if (Firstname != null && __isset.firstname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Firstname: ");
          __sb.Append(Firstname);
        }
        if (Lastname != null && __isset.lastname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lastname: ");
          __sb.Append(Lastname);
        }
        if (RoundName != null && __isset.roundName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RoundName: ");
          __sb.Append(RoundName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindEnrollmentByChildAndRound_result : TBase
    {
      private Enrollment _success;

      public Enrollment Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindEnrollmentByChildAndRound_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Enrollment();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindEnrollmentByChildAndRound_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindEnrollmentByChildAndRound_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveChild_args : TBase
    {
      private string _firstname;
      private string _lastname;
      private int _age;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }

      public int Age
      {
        get
        {
          return _age;
        }
        set
        {
          __isset.age = true;
          this._age = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstname;
        public bool lastname;
        public bool age;
      }

      public SaveChild_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Firstname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Lastname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Age = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SaveChild_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Firstname != null && __isset.firstname) {
            field.Name = "firstname";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Firstname);
            oprot.WriteFieldEnd();
          }
          if (Lastname != null && __isset.lastname) {
            field.Name = "lastname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lastname);
            oprot.WriteFieldEnd();
          }
          if (__isset.age) {
            field.Name = "age";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Age);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveChild_args(");
        bool __first = true;
        if (Firstname != null && __isset.firstname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Firstname: ");
          __sb.Append(Firstname);
        }
        if (Lastname != null && __isset.lastname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lastname: ");
          __sb.Append(Lastname);
        }
        if (__isset.age) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Age: ");
          __sb.Append(Age);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveChild_result : TBase
    {
      private Child _success;

      public Child Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SaveChild_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Child();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SaveChild_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveChild_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findChildrenForRound_args : TBase
    {
      private string _roundName;

      public string RoundName
      {
        get
        {
          return _roundName;
        }
        set
        {
          __isset.roundName = true;
          this._roundName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool roundName;
      }

      public findChildrenForRound_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  RoundName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findChildrenForRound_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (RoundName != null && __isset.roundName) {
            field.Name = "roundName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RoundName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findChildrenForRound_args(");
        bool __first = true;
        if (RoundName != null && __isset.roundName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RoundName: ");
          __sb.Append(RoundName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findChildrenForRound_result : TBase
    {
      private List<Child> _success;

      public List<Child> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findChildrenForRound_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Child>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      Child _elem6;
                      _elem6 = new Child();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findChildrenForRound_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Child _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findChildrenForRound_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindChildByName_args : TBase
    {
      private string _firstname;
      private string _lastname;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstname;
        public bool lastname;
      }

      public FindChildByName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Firstname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Lastname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindChildByName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Firstname != null && __isset.firstname) {
            field.Name = "firstname";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Firstname);
            oprot.WriteFieldEnd();
          }
          if (Lastname != null && __isset.lastname) {
            field.Name = "lastname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lastname);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindChildByName_args(");
        bool __first = true;
        if (Firstname != null && __isset.firstname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Firstname: ");
          __sb.Append(Firstname);
        }
        if (Lastname != null && __isset.lastname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lastname: ");
          __sb.Append(Lastname);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindChildByName_result : TBase
    {
      private Child _success;

      public Child Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindChildByName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Child();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindChildByName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindChildByName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindChildrenByAgeGroup_args : TBase
    {
      private string _ageGroup;

      public string AgeGroup
      {
        get
        {
          return _ageGroup;
        }
        set
        {
          __isset.ageGroup = true;
          this._ageGroup = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ageGroup;
      }

      public FindChildrenByAgeGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AgeGroup = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindChildrenByAgeGroup_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AgeGroup != null && __isset.ageGroup) {
            field.Name = "ageGroup";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AgeGroup);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindChildrenByAgeGroup_args(");
        bool __first = true;
        if (AgeGroup != null && __isset.ageGroup) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AgeGroup: ");
          __sb.Append(AgeGroup);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindChildrenByAgeGroup_result : TBase
    {
      private List<Child> _success;

      public List<Child> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindChildrenByAgeGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Child>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      Child _elem10;
                      _elem10 = new Child();
                      _elem10.Read(iprot);
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindChildrenByAgeGroup_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Child _iter11 in Success)
                {
                  _iter11.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindChildrenByAgeGroup_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveEnrollment_args : TBase
    {
      private string _firstname;
      private string _lastname;
      private int _age;
      private string _roundName;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }

      public int Age
      {
        get
        {
          return _age;
        }
        set
        {
          __isset.age = true;
          this._age = value;
        }
      }

      public string RoundName
      {
        get
        {
          return _roundName;
        }
        set
        {
          __isset.roundName = true;
          this._roundName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstname;
        public bool lastname;
        public bool age;
        public bool roundName;
      }

      public SaveEnrollment_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Firstname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Lastname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Age = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  RoundName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SaveEnrollment_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Firstname != null && __isset.firstname) {
            field.Name = "firstname";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Firstname);
            oprot.WriteFieldEnd();
          }
          if (Lastname != null && __isset.lastname) {
            field.Name = "lastname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lastname);
            oprot.WriteFieldEnd();
          }
          if (__isset.age) {
            field.Name = "age";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Age);
            oprot.WriteFieldEnd();
          }
          if (RoundName != null && __isset.roundName) {
            field.Name = "roundName";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RoundName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveEnrollment_args(");
        bool __first = true;
        if (Firstname != null && __isset.firstname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Firstname: ");
          __sb.Append(Firstname);
        }
        if (Lastname != null && __isset.lastname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lastname: ");
          __sb.Append(Lastname);
        }
        if (__isset.age) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Age: ");
          __sb.Append(Age);
        }
        if (RoundName != null && __isset.roundName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RoundName: ");
          __sb.Append(RoundName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveEnrollment_result : TBase
    {
      private Enrollment _success;

      public Enrollment Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SaveEnrollment_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Enrollment();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SaveEnrollment_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveEnrollment_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindNumberOfEnrollmentsForChild_args : TBase
    {
      private string _firstname;
      private string _lastname;

      public string Firstname
      {
        get
        {
          return _firstname;
        }
        set
        {
          __isset.firstname = true;
          this._firstname = value;
        }
      }

      public string Lastname
      {
        get
        {
          return _lastname;
        }
        set
        {
          __isset.lastname = true;
          this._lastname = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool firstname;
        public bool lastname;
      }

      public FindNumberOfEnrollmentsForChild_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Firstname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Lastname = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindNumberOfEnrollmentsForChild_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Firstname != null && __isset.firstname) {
            field.Name = "firstname";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Firstname);
            oprot.WriteFieldEnd();
          }
          if (Lastname != null && __isset.lastname) {
            field.Name = "lastname";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Lastname);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindNumberOfEnrollmentsForChild_args(");
        bool __first = true;
        if (Firstname != null && __isset.firstname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Firstname: ");
          __sb.Append(Firstname);
        }
        if (Lastname != null && __isset.lastname) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lastname: ");
          __sb.Append(Lastname);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindNumberOfEnrollmentsForChild_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindNumberOfEnrollmentsForChild_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FindNumberOfEnrollmentsForChild_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FindNumberOfEnrollmentsForChild_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
