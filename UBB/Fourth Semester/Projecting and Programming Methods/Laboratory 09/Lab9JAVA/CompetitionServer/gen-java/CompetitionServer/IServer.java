/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package CompetitionServer;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-04-18")
public class IServer {

  public interface Iface {

    public void logout(User u) throws org.apache.thrift.TException;

    public int login(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException;

    public long getNrChildrenForRound(java.lang.String name) throws org.apache.thrift.TException;

    public java.util.List<Round> findAllRounds() throws org.apache.thrift.TException;

    public Enrollment FindEnrollmentByChildAndRound(java.lang.String firstname, java.lang.String lastname, java.lang.String roundName) throws org.apache.thrift.TException;

    public Child SaveChild(java.lang.String firstname, java.lang.String lastname, int age) throws org.apache.thrift.TException;

    public java.util.List<Child> findChildrenForRound(java.lang.String roundName) throws org.apache.thrift.TException;

    public Child FindChildByName(java.lang.String firstname, java.lang.String lastname) throws org.apache.thrift.TException;

    public java.util.List<Child> FindChildrenByAgeGroup(java.lang.String ageGroup) throws org.apache.thrift.TException;

    public Enrollment SaveEnrollment(java.lang.String firstname, java.lang.String lastname, int age, java.lang.String roundName) throws org.apache.thrift.TException;

    public long FindNumberOfEnrollmentsForChild(java.lang.String firstname, java.lang.String lastname) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void logout(User u, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void login(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getNrChildrenForRound(java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void findAllRounds(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Round>> resultHandler) throws org.apache.thrift.TException;

    public void FindEnrollmentByChildAndRound(java.lang.String firstname, java.lang.String lastname, java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler) throws org.apache.thrift.TException;

    public void SaveChild(java.lang.String firstname, java.lang.String lastname, int age, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler) throws org.apache.thrift.TException;

    public void findChildrenForRound(java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler) throws org.apache.thrift.TException;

    public void FindChildByName(java.lang.String firstname, java.lang.String lastname, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler) throws org.apache.thrift.TException;

    public void FindChildrenByAgeGroup(java.lang.String ageGroup, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler) throws org.apache.thrift.TException;

    public void SaveEnrollment(java.lang.String firstname, java.lang.String lastname, int age, java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler) throws org.apache.thrift.TException;

    public void FindNumberOfEnrollmentsForChild(java.lang.String firstname, java.lang.String lastname, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void logout(User u) throws org.apache.thrift.TException
    {
      send_logout(u);
      recv_logout();
    }

    public void send_logout(User u) throws org.apache.thrift.TException
    {
      logout_args args = new logout_args();
      args.setU(u);
      sendBase("logout", args);
    }

    public void recv_logout() throws org.apache.thrift.TException
    {
      logout_result result = new logout_result();
      receiveBase(result, "logout");
      return;
    }

    public int login(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      send_login(username, password);
      return recv_login();
    }

    public void send_login(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("login", args);
    }

    public int recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public long getNrChildrenForRound(java.lang.String name) throws org.apache.thrift.TException
    {
      send_getNrChildrenForRound(name);
      return recv_getNrChildrenForRound();
    }

    public void send_getNrChildrenForRound(java.lang.String name) throws org.apache.thrift.TException
    {
      getNrChildrenForRound_args args = new getNrChildrenForRound_args();
      args.setName(name);
      sendBase("getNrChildrenForRound", args);
    }

    public long recv_getNrChildrenForRound() throws org.apache.thrift.TException
    {
      getNrChildrenForRound_result result = new getNrChildrenForRound_result();
      receiveBase(result, "getNrChildrenForRound");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNrChildrenForRound failed: unknown result");
    }

    public java.util.List<Round> findAllRounds() throws org.apache.thrift.TException
    {
      send_findAllRounds();
      return recv_findAllRounds();
    }

    public void send_findAllRounds() throws org.apache.thrift.TException
    {
      findAllRounds_args args = new findAllRounds_args();
      sendBase("findAllRounds", args);
    }

    public java.util.List<Round> recv_findAllRounds() throws org.apache.thrift.TException
    {
      findAllRounds_result result = new findAllRounds_result();
      receiveBase(result, "findAllRounds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllRounds failed: unknown result");
    }

    public Enrollment FindEnrollmentByChildAndRound(java.lang.String firstname, java.lang.String lastname, java.lang.String roundName) throws org.apache.thrift.TException
    {
      send_FindEnrollmentByChildAndRound(firstname, lastname, roundName);
      return recv_FindEnrollmentByChildAndRound();
    }

    public void send_FindEnrollmentByChildAndRound(java.lang.String firstname, java.lang.String lastname, java.lang.String roundName) throws org.apache.thrift.TException
    {
      FindEnrollmentByChildAndRound_args args = new FindEnrollmentByChildAndRound_args();
      args.setFirstname(firstname);
      args.setLastname(lastname);
      args.setRoundName(roundName);
      sendBase("FindEnrollmentByChildAndRound", args);
    }

    public Enrollment recv_FindEnrollmentByChildAndRound() throws org.apache.thrift.TException
    {
      FindEnrollmentByChildAndRound_result result = new FindEnrollmentByChildAndRound_result();
      receiveBase(result, "FindEnrollmentByChildAndRound");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FindEnrollmentByChildAndRound failed: unknown result");
    }

    public Child SaveChild(java.lang.String firstname, java.lang.String lastname, int age) throws org.apache.thrift.TException
    {
      send_SaveChild(firstname, lastname, age);
      return recv_SaveChild();
    }

    public void send_SaveChild(java.lang.String firstname, java.lang.String lastname, int age) throws org.apache.thrift.TException
    {
      SaveChild_args args = new SaveChild_args();
      args.setFirstname(firstname);
      args.setLastname(lastname);
      args.setAge(age);
      sendBase("SaveChild", args);
    }

    public Child recv_SaveChild() throws org.apache.thrift.TException
    {
      SaveChild_result result = new SaveChild_result();
      receiveBase(result, "SaveChild");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SaveChild failed: unknown result");
    }

    public java.util.List<Child> findChildrenForRound(java.lang.String roundName) throws org.apache.thrift.TException
    {
      send_findChildrenForRound(roundName);
      return recv_findChildrenForRound();
    }

    public void send_findChildrenForRound(java.lang.String roundName) throws org.apache.thrift.TException
    {
      findChildrenForRound_args args = new findChildrenForRound_args();
      args.setRoundName(roundName);
      sendBase("findChildrenForRound", args);
    }

    public java.util.List<Child> recv_findChildrenForRound() throws org.apache.thrift.TException
    {
      findChildrenForRound_result result = new findChildrenForRound_result();
      receiveBase(result, "findChildrenForRound");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findChildrenForRound failed: unknown result");
    }

    public Child FindChildByName(java.lang.String firstname, java.lang.String lastname) throws org.apache.thrift.TException
    {
      send_FindChildByName(firstname, lastname);
      return recv_FindChildByName();
    }

    public void send_FindChildByName(java.lang.String firstname, java.lang.String lastname) throws org.apache.thrift.TException
    {
      FindChildByName_args args = new FindChildByName_args();
      args.setFirstname(firstname);
      args.setLastname(lastname);
      sendBase("FindChildByName", args);
    }

    public Child recv_FindChildByName() throws org.apache.thrift.TException
    {
      FindChildByName_result result = new FindChildByName_result();
      receiveBase(result, "FindChildByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FindChildByName failed: unknown result");
    }

    public java.util.List<Child> FindChildrenByAgeGroup(java.lang.String ageGroup) throws org.apache.thrift.TException
    {
      send_FindChildrenByAgeGroup(ageGroup);
      return recv_FindChildrenByAgeGroup();
    }

    public void send_FindChildrenByAgeGroup(java.lang.String ageGroup) throws org.apache.thrift.TException
    {
      FindChildrenByAgeGroup_args args = new FindChildrenByAgeGroup_args();
      args.setAgeGroup(ageGroup);
      sendBase("FindChildrenByAgeGroup", args);
    }

    public java.util.List<Child> recv_FindChildrenByAgeGroup() throws org.apache.thrift.TException
    {
      FindChildrenByAgeGroup_result result = new FindChildrenByAgeGroup_result();
      receiveBase(result, "FindChildrenByAgeGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FindChildrenByAgeGroup failed: unknown result");
    }

    public Enrollment SaveEnrollment(java.lang.String firstname, java.lang.String lastname, int age, java.lang.String roundName) throws org.apache.thrift.TException
    {
      send_SaveEnrollment(firstname, lastname, age, roundName);
      return recv_SaveEnrollment();
    }

    public void send_SaveEnrollment(java.lang.String firstname, java.lang.String lastname, int age, java.lang.String roundName) throws org.apache.thrift.TException
    {
      SaveEnrollment_args args = new SaveEnrollment_args();
      args.setFirstname(firstname);
      args.setLastname(lastname);
      args.setAge(age);
      args.setRoundName(roundName);
      sendBase("SaveEnrollment", args);
    }

    public Enrollment recv_SaveEnrollment() throws org.apache.thrift.TException
    {
      SaveEnrollment_result result = new SaveEnrollment_result();
      receiveBase(result, "SaveEnrollment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SaveEnrollment failed: unknown result");
    }

    public long FindNumberOfEnrollmentsForChild(java.lang.String firstname, java.lang.String lastname) throws org.apache.thrift.TException
    {
      send_FindNumberOfEnrollmentsForChild(firstname, lastname);
      return recv_FindNumberOfEnrollmentsForChild();
    }

    public void send_FindNumberOfEnrollmentsForChild(java.lang.String firstname, java.lang.String lastname) throws org.apache.thrift.TException
    {
      FindNumberOfEnrollmentsForChild_args args = new FindNumberOfEnrollmentsForChild_args();
      args.setFirstname(firstname);
      args.setLastname(lastname);
      sendBase("FindNumberOfEnrollmentsForChild", args);
    }

    public long recv_FindNumberOfEnrollmentsForChild() throws org.apache.thrift.TException
    {
      FindNumberOfEnrollmentsForChild_result result = new FindNumberOfEnrollmentsForChild_result();
      receiveBase(result, "FindNumberOfEnrollmentsForChild");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FindNumberOfEnrollmentsForChild failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void logout(User u, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logout_call method_call = new logout_call(u, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private User u;
      public logout_call(User u, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.u = u;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setU(u);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void login(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String username;
      private java.lang.String password;
      public login_call(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void getNrChildrenForRound(java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNrChildrenForRound_call method_call = new getNrChildrenForRound_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNrChildrenForRound_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String name;
      public getNrChildrenForRound_call(java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNrChildrenForRound", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNrChildrenForRound_args args = new getNrChildrenForRound_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNrChildrenForRound();
      }
    }

    public void findAllRounds(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Round>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllRounds_call method_call = new findAllRounds_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllRounds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Round>> {
      public findAllRounds_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Round>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllRounds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllRounds_args args = new findAllRounds_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Round> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllRounds();
      }
    }

    public void FindEnrollmentByChildAndRound(java.lang.String firstname, java.lang.String lastname, java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FindEnrollmentByChildAndRound_call method_call = new FindEnrollmentByChildAndRound_call(firstname, lastname, roundName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FindEnrollmentByChildAndRound_call extends org.apache.thrift.async.TAsyncMethodCall<Enrollment> {
      private java.lang.String firstname;
      private java.lang.String lastname;
      private java.lang.String roundName;
      public FindEnrollmentByChildAndRound_call(java.lang.String firstname, java.lang.String lastname, java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstname = firstname;
        this.lastname = lastname;
        this.roundName = roundName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FindEnrollmentByChildAndRound", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FindEnrollmentByChildAndRound_args args = new FindEnrollmentByChildAndRound_args();
        args.setFirstname(firstname);
        args.setLastname(lastname);
        args.setRoundName(roundName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Enrollment getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FindEnrollmentByChildAndRound();
      }
    }

    public void SaveChild(java.lang.String firstname, java.lang.String lastname, int age, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SaveChild_call method_call = new SaveChild_call(firstname, lastname, age, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SaveChild_call extends org.apache.thrift.async.TAsyncMethodCall<Child> {
      private java.lang.String firstname;
      private java.lang.String lastname;
      private int age;
      public SaveChild_call(java.lang.String firstname, java.lang.String lastname, int age, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstname = firstname;
        this.lastname = lastname;
        this.age = age;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SaveChild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SaveChild_args args = new SaveChild_args();
        args.setFirstname(firstname);
        args.setLastname(lastname);
        args.setAge(age);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Child getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SaveChild();
      }
    }

    public void findChildrenForRound(java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findChildrenForRound_call method_call = new findChildrenForRound_call(roundName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findChildrenForRound_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Child>> {
      private java.lang.String roundName;
      public findChildrenForRound_call(java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roundName = roundName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findChildrenForRound", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findChildrenForRound_args args = new findChildrenForRound_args();
        args.setRoundName(roundName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Child> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findChildrenForRound();
      }
    }

    public void FindChildByName(java.lang.String firstname, java.lang.String lastname, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FindChildByName_call method_call = new FindChildByName_call(firstname, lastname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FindChildByName_call extends org.apache.thrift.async.TAsyncMethodCall<Child> {
      private java.lang.String firstname;
      private java.lang.String lastname;
      public FindChildByName_call(java.lang.String firstname, java.lang.String lastname, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstname = firstname;
        this.lastname = lastname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FindChildByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FindChildByName_args args = new FindChildByName_args();
        args.setFirstname(firstname);
        args.setLastname(lastname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Child getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FindChildByName();
      }
    }

    public void FindChildrenByAgeGroup(java.lang.String ageGroup, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FindChildrenByAgeGroup_call method_call = new FindChildrenByAgeGroup_call(ageGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FindChildrenByAgeGroup_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Child>> {
      private java.lang.String ageGroup;
      public FindChildrenByAgeGroup_call(java.lang.String ageGroup, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ageGroup = ageGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FindChildrenByAgeGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FindChildrenByAgeGroup_args args = new FindChildrenByAgeGroup_args();
        args.setAgeGroup(ageGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Child> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FindChildrenByAgeGroup();
      }
    }

    public void SaveEnrollment(java.lang.String firstname, java.lang.String lastname, int age, java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SaveEnrollment_call method_call = new SaveEnrollment_call(firstname, lastname, age, roundName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SaveEnrollment_call extends org.apache.thrift.async.TAsyncMethodCall<Enrollment> {
      private java.lang.String firstname;
      private java.lang.String lastname;
      private int age;
      private java.lang.String roundName;
      public SaveEnrollment_call(java.lang.String firstname, java.lang.String lastname, int age, java.lang.String roundName, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstname = firstname;
        this.lastname = lastname;
        this.age = age;
        this.roundName = roundName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SaveEnrollment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SaveEnrollment_args args = new SaveEnrollment_args();
        args.setFirstname(firstname);
        args.setLastname(lastname);
        args.setAge(age);
        args.setRoundName(roundName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Enrollment getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SaveEnrollment();
      }
    }

    public void FindNumberOfEnrollmentsForChild(java.lang.String firstname, java.lang.String lastname, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FindNumberOfEnrollmentsForChild_call method_call = new FindNumberOfEnrollmentsForChild_call(firstname, lastname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FindNumberOfEnrollmentsForChild_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String firstname;
      private java.lang.String lastname;
      public FindNumberOfEnrollmentsForChild_call(java.lang.String firstname, java.lang.String lastname, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstname = firstname;
        this.lastname = lastname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FindNumberOfEnrollmentsForChild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FindNumberOfEnrollmentsForChild_args args = new FindNumberOfEnrollmentsForChild_args();
        args.setFirstname(firstname);
        args.setLastname(lastname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FindNumberOfEnrollmentsForChild();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("logout", new logout());
      processMap.put("login", new login());
      processMap.put("getNrChildrenForRound", new getNrChildrenForRound());
      processMap.put("findAllRounds", new findAllRounds());
      processMap.put("FindEnrollmentByChildAndRound", new FindEnrollmentByChildAndRound());
      processMap.put("SaveChild", new SaveChild());
      processMap.put("findChildrenForRound", new findChildrenForRound());
      processMap.put("FindChildByName", new FindChildByName());
      processMap.put("FindChildrenByAgeGroup", new FindChildrenByAgeGroup());
      processMap.put("SaveEnrollment", new SaveEnrollment());
      processMap.put("FindNumberOfEnrollmentsForChild", new FindNumberOfEnrollmentsForChild());
      return processMap;
    }

    public static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
        logout_result result = new logout_result();
        iface.logout(args.u);
        return result;
      }
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.username, args.password);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getNrChildrenForRound<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNrChildrenForRound_args> {
      public getNrChildrenForRound() {
        super("getNrChildrenForRound");
      }

      public getNrChildrenForRound_args getEmptyArgsInstance() {
        return new getNrChildrenForRound_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getNrChildrenForRound_result getResult(I iface, getNrChildrenForRound_args args) throws org.apache.thrift.TException {
        getNrChildrenForRound_result result = new getNrChildrenForRound_result();
        result.success = iface.getNrChildrenForRound(args.name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllRounds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllRounds_args> {
      public findAllRounds() {
        super("findAllRounds");
      }

      public findAllRounds_args getEmptyArgsInstance() {
        return new findAllRounds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findAllRounds_result getResult(I iface, findAllRounds_args args) throws org.apache.thrift.TException {
        findAllRounds_result result = new findAllRounds_result();
        result.success = iface.findAllRounds();
        return result;
      }
    }

    public static class FindEnrollmentByChildAndRound<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FindEnrollmentByChildAndRound_args> {
      public FindEnrollmentByChildAndRound() {
        super("FindEnrollmentByChildAndRound");
      }

      public FindEnrollmentByChildAndRound_args getEmptyArgsInstance() {
        return new FindEnrollmentByChildAndRound_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public FindEnrollmentByChildAndRound_result getResult(I iface, FindEnrollmentByChildAndRound_args args) throws org.apache.thrift.TException {
        FindEnrollmentByChildAndRound_result result = new FindEnrollmentByChildAndRound_result();
        result.success = iface.FindEnrollmentByChildAndRound(args.firstname, args.lastname, args.roundName);
        return result;
      }
    }

    public static class SaveChild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SaveChild_args> {
      public SaveChild() {
        super("SaveChild");
      }

      public SaveChild_args getEmptyArgsInstance() {
        return new SaveChild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public SaveChild_result getResult(I iface, SaveChild_args args) throws org.apache.thrift.TException {
        SaveChild_result result = new SaveChild_result();
        result.success = iface.SaveChild(args.firstname, args.lastname, args.age);
        return result;
      }
    }

    public static class findChildrenForRound<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findChildrenForRound_args> {
      public findChildrenForRound() {
        super("findChildrenForRound");
      }

      public findChildrenForRound_args getEmptyArgsInstance() {
        return new findChildrenForRound_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findChildrenForRound_result getResult(I iface, findChildrenForRound_args args) throws org.apache.thrift.TException {
        findChildrenForRound_result result = new findChildrenForRound_result();
        result.success = iface.findChildrenForRound(args.roundName);
        return result;
      }
    }

    public static class FindChildByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FindChildByName_args> {
      public FindChildByName() {
        super("FindChildByName");
      }

      public FindChildByName_args getEmptyArgsInstance() {
        return new FindChildByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public FindChildByName_result getResult(I iface, FindChildByName_args args) throws org.apache.thrift.TException {
        FindChildByName_result result = new FindChildByName_result();
        result.success = iface.FindChildByName(args.firstname, args.lastname);
        return result;
      }
    }

    public static class FindChildrenByAgeGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FindChildrenByAgeGroup_args> {
      public FindChildrenByAgeGroup() {
        super("FindChildrenByAgeGroup");
      }

      public FindChildrenByAgeGroup_args getEmptyArgsInstance() {
        return new FindChildrenByAgeGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public FindChildrenByAgeGroup_result getResult(I iface, FindChildrenByAgeGroup_args args) throws org.apache.thrift.TException {
        FindChildrenByAgeGroup_result result = new FindChildrenByAgeGroup_result();
        result.success = iface.FindChildrenByAgeGroup(args.ageGroup);
        return result;
      }
    }

    public static class SaveEnrollment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SaveEnrollment_args> {
      public SaveEnrollment() {
        super("SaveEnrollment");
      }

      public SaveEnrollment_args getEmptyArgsInstance() {
        return new SaveEnrollment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public SaveEnrollment_result getResult(I iface, SaveEnrollment_args args) throws org.apache.thrift.TException {
        SaveEnrollment_result result = new SaveEnrollment_result();
        result.success = iface.SaveEnrollment(args.firstname, args.lastname, args.age, args.roundName);
        return result;
      }
    }

    public static class FindNumberOfEnrollmentsForChild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FindNumberOfEnrollmentsForChild_args> {
      public FindNumberOfEnrollmentsForChild() {
        super("FindNumberOfEnrollmentsForChild");
      }

      public FindNumberOfEnrollmentsForChild_args getEmptyArgsInstance() {
        return new FindNumberOfEnrollmentsForChild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public FindNumberOfEnrollmentsForChild_result getResult(I iface, FindNumberOfEnrollmentsForChild_args args) throws org.apache.thrift.TException {
        FindNumberOfEnrollmentsForChild_result result = new FindNumberOfEnrollmentsForChild_result();
        result.success = iface.FindNumberOfEnrollmentsForChild(args.firstname, args.lastname);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("logout", new logout());
      processMap.put("login", new login());
      processMap.put("getNrChildrenForRound", new getNrChildrenForRound());
      processMap.put("findAllRounds", new findAllRounds());
      processMap.put("FindEnrollmentByChildAndRound", new FindEnrollmentByChildAndRound());
      processMap.put("SaveChild", new SaveChild());
      processMap.put("findChildrenForRound", new findChildrenForRound());
      processMap.put("FindChildByName", new FindChildByName());
      processMap.put("FindChildrenByAgeGroup", new FindChildrenByAgeGroup());
      processMap.put("SaveEnrollment", new SaveEnrollment());
      processMap.put("FindNumberOfEnrollmentsForChild", new FindNumberOfEnrollmentsForChild());
      return processMap;
    }

    public static class logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logout_args, Void> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logout_result result = new logout_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logout_result result = new logout_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logout(args.u,resultHandler);
      }
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, java.lang.Integer> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            login_result result = new login_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            login_result result = new login_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.login(args.username, args.password,resultHandler);
      }
    }

    public static class getNrChildrenForRound<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNrChildrenForRound_args, java.lang.Long> {
      public getNrChildrenForRound() {
        super("getNrChildrenForRound");
      }

      public getNrChildrenForRound_args getEmptyArgsInstance() {
        return new getNrChildrenForRound_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getNrChildrenForRound_result result = new getNrChildrenForRound_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNrChildrenForRound_result result = new getNrChildrenForRound_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNrChildrenForRound_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getNrChildrenForRound(args.name,resultHandler);
      }
    }

    public static class findAllRounds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllRounds_args, java.util.List<Round>> {
      public findAllRounds() {
        super("findAllRounds");
      }

      public findAllRounds_args getEmptyArgsInstance() {
        return new findAllRounds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Round>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Round>>() { 
          public void onComplete(java.util.List<Round> o) {
            findAllRounds_result result = new findAllRounds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAllRounds_result result = new findAllRounds_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllRounds_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Round>> resultHandler) throws org.apache.thrift.TException {
        iface.findAllRounds(resultHandler);
      }
    }

    public static class FindEnrollmentByChildAndRound<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FindEnrollmentByChildAndRound_args, Enrollment> {
      public FindEnrollmentByChildAndRound() {
        super("FindEnrollmentByChildAndRound");
      }

      public FindEnrollmentByChildAndRound_args getEmptyArgsInstance() {
        return new FindEnrollmentByChildAndRound_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Enrollment> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Enrollment>() { 
          public void onComplete(Enrollment o) {
            FindEnrollmentByChildAndRound_result result = new FindEnrollmentByChildAndRound_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FindEnrollmentByChildAndRound_result result = new FindEnrollmentByChildAndRound_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FindEnrollmentByChildAndRound_args args, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler) throws org.apache.thrift.TException {
        iface.FindEnrollmentByChildAndRound(args.firstname, args.lastname, args.roundName,resultHandler);
      }
    }

    public static class SaveChild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SaveChild_args, Child> {
      public SaveChild() {
        super("SaveChild");
      }

      public SaveChild_args getEmptyArgsInstance() {
        return new SaveChild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Child> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Child>() { 
          public void onComplete(Child o) {
            SaveChild_result result = new SaveChild_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SaveChild_result result = new SaveChild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SaveChild_args args, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler) throws org.apache.thrift.TException {
        iface.SaveChild(args.firstname, args.lastname, args.age,resultHandler);
      }
    }

    public static class findChildrenForRound<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findChildrenForRound_args, java.util.List<Child>> {
      public findChildrenForRound() {
        super("findChildrenForRound");
      }

      public findChildrenForRound_args getEmptyArgsInstance() {
        return new findChildrenForRound_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>>() { 
          public void onComplete(java.util.List<Child> o) {
            findChildrenForRound_result result = new findChildrenForRound_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findChildrenForRound_result result = new findChildrenForRound_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findChildrenForRound_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler) throws org.apache.thrift.TException {
        iface.findChildrenForRound(args.roundName,resultHandler);
      }
    }

    public static class FindChildByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FindChildByName_args, Child> {
      public FindChildByName() {
        super("FindChildByName");
      }

      public FindChildByName_args getEmptyArgsInstance() {
        return new FindChildByName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Child> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Child>() { 
          public void onComplete(Child o) {
            FindChildByName_result result = new FindChildByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FindChildByName_result result = new FindChildByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FindChildByName_args args, org.apache.thrift.async.AsyncMethodCallback<Child> resultHandler) throws org.apache.thrift.TException {
        iface.FindChildByName(args.firstname, args.lastname,resultHandler);
      }
    }

    public static class FindChildrenByAgeGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FindChildrenByAgeGroup_args, java.util.List<Child>> {
      public FindChildrenByAgeGroup() {
        super("FindChildrenByAgeGroup");
      }

      public FindChildrenByAgeGroup_args getEmptyArgsInstance() {
        return new FindChildrenByAgeGroup_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>>() { 
          public void onComplete(java.util.List<Child> o) {
            FindChildrenByAgeGroup_result result = new FindChildrenByAgeGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FindChildrenByAgeGroup_result result = new FindChildrenByAgeGroup_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FindChildrenByAgeGroup_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Child>> resultHandler) throws org.apache.thrift.TException {
        iface.FindChildrenByAgeGroup(args.ageGroup,resultHandler);
      }
    }

    public static class SaveEnrollment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SaveEnrollment_args, Enrollment> {
      public SaveEnrollment() {
        super("SaveEnrollment");
      }

      public SaveEnrollment_args getEmptyArgsInstance() {
        return new SaveEnrollment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Enrollment> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Enrollment>() { 
          public void onComplete(Enrollment o) {
            SaveEnrollment_result result = new SaveEnrollment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SaveEnrollment_result result = new SaveEnrollment_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SaveEnrollment_args args, org.apache.thrift.async.AsyncMethodCallback<Enrollment> resultHandler) throws org.apache.thrift.TException {
        iface.SaveEnrollment(args.firstname, args.lastname, args.age, args.roundName,resultHandler);
      }
    }

    public static class FindNumberOfEnrollmentsForChild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FindNumberOfEnrollmentsForChild_args, java.lang.Long> {
      public FindNumberOfEnrollmentsForChild() {
        super("FindNumberOfEnrollmentsForChild");
      }

      public FindNumberOfEnrollmentsForChild_args getEmptyArgsInstance() {
        return new FindNumberOfEnrollmentsForChild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            FindNumberOfEnrollmentsForChild_result result = new FindNumberOfEnrollmentsForChild_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FindNumberOfEnrollmentsForChild_result result = new FindNumberOfEnrollmentsForChild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FindNumberOfEnrollmentsForChild_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.FindNumberOfEnrollmentsForChild(args.firstname, args.lastname,resultHandler);
      }
    }

  }

  public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

    private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable User u; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U((short)1, "u");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U
            return U;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
    }

    public logout_args() {
    }

    public logout_args(
      User u)
    {
      this();
      this.u = u;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
      if (other.isSetU()) {
        this.u = new User(other.u);
      }
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    @Override
    public void clear() {
      this.u = null;
    }

    @org.apache.thrift.annotation.Nullable
    public User getU() {
      return this.u;
    }

    public logout_args setU(@org.apache.thrift.annotation.Nullable User u) {
      this.u = u;
      return this;
    }

    public void unsetU() {
      this.u = null;
    }

    /** Returns true if field u is set (has been assigned a value) and false otherwise */
    public boolean isSetU() {
      return this.u != null;
    }

    public void setUIsSet(boolean value) {
      if (!value) {
        this.u = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case U:
        if (value == null) {
          unsetU();
        } else {
          setU((User)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case U:
        return getU();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case U:
        return isSetU();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_u = true && this.isSetU();
      boolean that_present_u = true && that.isSetU();
      if (this_present_u || that_present_u) {
        if (!(this_present_u && that_present_u))
          return false;
        if (!this.u.equals(that.u))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetU()) ? 131071 : 524287);
      if (isSetU())
        hashCode = hashCode * 8191 + u.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetU()).compareTo(other.isSetU());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetU()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_args(");
      boolean first = true;

      sb.append("u:");
      if (this.u == null) {
        sb.append("null");
      } else {
        sb.append(this.u);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (u != null) {
        u.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsStandardScheme getScheme() {
        return new logout_argsStandardScheme();
      }
    }

    private static class logout_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.u = new User();
                struct.u.read(iprot);
                struct.setUIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.u != null) {
          oprot.writeFieldBegin(U_FIELD_DESC);
          struct.u.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsTupleScheme getScheme() {
        return new logout_argsTupleScheme();
      }
    }

    private static class logout_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetU()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetU()) {
          struct.u.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.u = new User();
          struct.u.read(iprot);
          struct.setUIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
    }

    public logout_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultStandardScheme getScheme() {
        return new logout_resultStandardScheme();
      }
    }

    private static class logout_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultTupleScheme getScheme() {
        return new logout_resultTupleScheme();
      }
    }

    private static class logout_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      java.lang.String username,
      java.lang.String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsername() {
      return this.username;
    }

    public login_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
      return this.password;
    }

    public login_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public login_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNrChildrenForRound_args implements org.apache.thrift.TBase<getNrChildrenForRound_args, getNrChildrenForRound_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNrChildrenForRound_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNrChildrenForRound_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNrChildrenForRound_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNrChildrenForRound_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNrChildrenForRound_args.class, metaDataMap);
    }

    public getNrChildrenForRound_args() {
    }

    public getNrChildrenForRound_args(
      java.lang.String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNrChildrenForRound_args(getNrChildrenForRound_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getNrChildrenForRound_args deepCopy() {
      return new getNrChildrenForRound_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public getNrChildrenForRound_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNrChildrenForRound_args)
        return this.equals((getNrChildrenForRound_args)that);
      return false;
    }

    public boolean equals(getNrChildrenForRound_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNrChildrenForRound_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNrChildrenForRound_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNrChildrenForRound_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNrChildrenForRound_argsStandardScheme getScheme() {
        return new getNrChildrenForRound_argsStandardScheme();
      }
    }

    private static class getNrChildrenForRound_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNrChildrenForRound_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNrChildrenForRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNrChildrenForRound_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNrChildrenForRound_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNrChildrenForRound_argsTupleScheme getScheme() {
        return new getNrChildrenForRound_argsTupleScheme();
      }
    }

    private static class getNrChildrenForRound_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNrChildrenForRound_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNrChildrenForRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNrChildrenForRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNrChildrenForRound_result implements org.apache.thrift.TBase<getNrChildrenForRound_result, getNrChildrenForRound_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNrChildrenForRound_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNrChildrenForRound_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNrChildrenForRound_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNrChildrenForRound_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNrChildrenForRound_result.class, metaDataMap);
    }

    public getNrChildrenForRound_result() {
    }

    public getNrChildrenForRound_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNrChildrenForRound_result(getNrChildrenForRound_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getNrChildrenForRound_result deepCopy() {
      return new getNrChildrenForRound_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getNrChildrenForRound_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNrChildrenForRound_result)
        return this.equals((getNrChildrenForRound_result)that);
      return false;
    }

    public boolean equals(getNrChildrenForRound_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getNrChildrenForRound_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNrChildrenForRound_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNrChildrenForRound_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNrChildrenForRound_resultStandardScheme getScheme() {
        return new getNrChildrenForRound_resultStandardScheme();
      }
    }

    private static class getNrChildrenForRound_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNrChildrenForRound_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNrChildrenForRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNrChildrenForRound_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNrChildrenForRound_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNrChildrenForRound_resultTupleScheme getScheme() {
        return new getNrChildrenForRound_resultTupleScheme();
      }
    }

    private static class getNrChildrenForRound_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNrChildrenForRound_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNrChildrenForRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNrChildrenForRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllRounds_args implements org.apache.thrift.TBase<findAllRounds_args, findAllRounds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRounds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRounds_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllRounds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllRounds_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRounds_args.class, metaDataMap);
    }

    public findAllRounds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRounds_args(findAllRounds_args other) {
    }

    public findAllRounds_args deepCopy() {
      return new findAllRounds_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRounds_args)
        return this.equals((findAllRounds_args)that);
      return false;
    }

    public boolean equals(findAllRounds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(findAllRounds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllRounds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRounds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllRounds_argsStandardScheme getScheme() {
        return new findAllRounds_argsStandardScheme();
      }
    }

    private static class findAllRounds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllRounds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRounds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRounds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRounds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllRounds_argsTupleScheme getScheme() {
        return new findAllRounds_argsTupleScheme();
      }
    }

    private static class findAllRounds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllRounds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRounds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRounds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllRounds_result implements org.apache.thrift.TBase<findAllRounds_result, findAllRounds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllRounds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllRounds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllRounds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllRounds_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Round> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Round.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllRounds_result.class, metaDataMap);
    }

    public findAllRounds_result() {
    }

    public findAllRounds_result(
      java.util.List<Round> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllRounds_result(findAllRounds_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Round> __this__success = new java.util.ArrayList<Round>(other.success.size());
        for (Round other_element : other.success) {
          __this__success.add(new Round(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllRounds_result deepCopy() {
      return new findAllRounds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Round> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Round elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Round>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Round> getSuccess() {
      return this.success;
    }

    public findAllRounds_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Round> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Round>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllRounds_result)
        return this.equals((findAllRounds_result)that);
      return false;
    }

    public boolean equals(findAllRounds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAllRounds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllRounds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllRounds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllRounds_resultStandardScheme getScheme() {
        return new findAllRounds_resultStandardScheme();
      }
    }

    private static class findAllRounds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllRounds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllRounds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Round>(_list0.size);
                  @org.apache.thrift.annotation.Nullable Round _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Round();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllRounds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Round _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllRounds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllRounds_resultTupleScheme getScheme() {
        return new findAllRounds_resultTupleScheme();
      }
    }

    private static class findAllRounds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllRounds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllRounds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Round _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllRounds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Round>(_list5.size);
            @org.apache.thrift.annotation.Nullable Round _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Round();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindEnrollmentByChildAndRound_args implements org.apache.thrift.TBase<FindEnrollmentByChildAndRound_args, FindEnrollmentByChildAndRound_args._Fields>, java.io.Serializable, Cloneable, Comparable<FindEnrollmentByChildAndRound_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindEnrollmentByChildAndRound_args");

    private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROUND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roundName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindEnrollmentByChildAndRound_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindEnrollmentByChildAndRound_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String firstname; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String lastname; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String roundName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRSTNAME((short)1, "firstname"),
      LASTNAME((short)2, "lastname"),
      ROUND_NAME((short)3, "roundName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRSTNAME
            return FIRSTNAME;
          case 2: // LASTNAME
            return LASTNAME;
          case 3: // ROUND_NAME
            return ROUND_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROUND_NAME, new org.apache.thrift.meta_data.FieldMetaData("roundName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindEnrollmentByChildAndRound_args.class, metaDataMap);
    }

    public FindEnrollmentByChildAndRound_args() {
    }

    public FindEnrollmentByChildAndRound_args(
      java.lang.String firstname,
      java.lang.String lastname,
      java.lang.String roundName)
    {
      this();
      this.firstname = firstname;
      this.lastname = lastname;
      this.roundName = roundName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindEnrollmentByChildAndRound_args(FindEnrollmentByChildAndRound_args other) {
      if (other.isSetFirstname()) {
        this.firstname = other.firstname;
      }
      if (other.isSetLastname()) {
        this.lastname = other.lastname;
      }
      if (other.isSetRoundName()) {
        this.roundName = other.roundName;
      }
    }

    public FindEnrollmentByChildAndRound_args deepCopy() {
      return new FindEnrollmentByChildAndRound_args(this);
    }

    @Override
    public void clear() {
      this.firstname = null;
      this.lastname = null;
      this.roundName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFirstname() {
      return this.firstname;
    }

    public FindEnrollmentByChildAndRound_args setFirstname(@org.apache.thrift.annotation.Nullable java.lang.String firstname) {
      this.firstname = firstname;
      return this;
    }

    public void unsetFirstname() {
      this.firstname = null;
    }

    /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstname() {
      return this.firstname != null;
    }

    public void setFirstnameIsSet(boolean value) {
      if (!value) {
        this.firstname = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLastname() {
      return this.lastname;
    }

    public FindEnrollmentByChildAndRound_args setLastname(@org.apache.thrift.annotation.Nullable java.lang.String lastname) {
      this.lastname = lastname;
      return this;
    }

    public void unsetLastname() {
      this.lastname = null;
    }

    /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
    public boolean isSetLastname() {
      return this.lastname != null;
    }

    public void setLastnameIsSet(boolean value) {
      if (!value) {
        this.lastname = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRoundName() {
      return this.roundName;
    }

    public FindEnrollmentByChildAndRound_args setRoundName(@org.apache.thrift.annotation.Nullable java.lang.String roundName) {
      this.roundName = roundName;
      return this;
    }

    public void unsetRoundName() {
      this.roundName = null;
    }

    /** Returns true if field roundName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundName() {
      return this.roundName != null;
    }

    public void setRoundNameIsSet(boolean value) {
      if (!value) {
        this.roundName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRSTNAME:
        if (value == null) {
          unsetFirstname();
        } else {
          setFirstname((java.lang.String)value);
        }
        break;

      case LASTNAME:
        if (value == null) {
          unsetLastname();
        } else {
          setLastname((java.lang.String)value);
        }
        break;

      case ROUND_NAME:
        if (value == null) {
          unsetRoundName();
        } else {
          setRoundName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRSTNAME:
        return getFirstname();

      case LASTNAME:
        return getLastname();

      case ROUND_NAME:
        return getRoundName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRSTNAME:
        return isSetFirstname();
      case LASTNAME:
        return isSetLastname();
      case ROUND_NAME:
        return isSetRoundName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindEnrollmentByChildAndRound_args)
        return this.equals((FindEnrollmentByChildAndRound_args)that);
      return false;
    }

    public boolean equals(FindEnrollmentByChildAndRound_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstname = true && this.isSetFirstname();
      boolean that_present_firstname = true && that.isSetFirstname();
      if (this_present_firstname || that_present_firstname) {
        if (!(this_present_firstname && that_present_firstname))
          return false;
        if (!this.firstname.equals(that.firstname))
          return false;
      }

      boolean this_present_lastname = true && this.isSetLastname();
      boolean that_present_lastname = true && that.isSetLastname();
      if (this_present_lastname || that_present_lastname) {
        if (!(this_present_lastname && that_present_lastname))
          return false;
        if (!this.lastname.equals(that.lastname))
          return false;
      }

      boolean this_present_roundName = true && this.isSetRoundName();
      boolean that_present_roundName = true && that.isSetRoundName();
      if (this_present_roundName || that_present_roundName) {
        if (!(this_present_roundName && that_present_roundName))
          return false;
        if (!this.roundName.equals(that.roundName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstname()) ? 131071 : 524287);
      if (isSetFirstname())
        hashCode = hashCode * 8191 + firstname.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastname()) ? 131071 : 524287);
      if (isSetLastname())
        hashCode = hashCode * 8191 + lastname.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoundName()) ? 131071 : 524287);
      if (isSetRoundName())
        hashCode = hashCode * 8191 + roundName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindEnrollmentByChildAndRound_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoundName()).compareTo(other.isSetRoundName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundName, other.roundName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindEnrollmentByChildAndRound_args(");
      boolean first = true;

      sb.append("firstname:");
      if (this.firstname == null) {
        sb.append("null");
      } else {
        sb.append(this.firstname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastname:");
      if (this.lastname == null) {
        sb.append("null");
      } else {
        sb.append(this.lastname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roundName:");
      if (this.roundName == null) {
        sb.append("null");
      } else {
        sb.append(this.roundName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindEnrollmentByChildAndRound_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindEnrollmentByChildAndRound_argsStandardScheme getScheme() {
        return new FindEnrollmentByChildAndRound_argsStandardScheme();
      }
    }

    private static class FindEnrollmentByChildAndRound_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindEnrollmentByChildAndRound_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindEnrollmentByChildAndRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstname = iprot.readString();
                struct.setFirstnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LASTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastname = iprot.readString();
                struct.setLastnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roundName = iprot.readString();
                struct.setRoundNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindEnrollmentByChildAndRound_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstname != null) {
          oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
          oprot.writeString(struct.firstname);
          oprot.writeFieldEnd();
        }
        if (struct.lastname != null) {
          oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
          oprot.writeString(struct.lastname);
          oprot.writeFieldEnd();
        }
        if (struct.roundName != null) {
          oprot.writeFieldBegin(ROUND_NAME_FIELD_DESC);
          oprot.writeString(struct.roundName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindEnrollmentByChildAndRound_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindEnrollmentByChildAndRound_argsTupleScheme getScheme() {
        return new FindEnrollmentByChildAndRound_argsTupleScheme();
      }
    }

    private static class FindEnrollmentByChildAndRound_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindEnrollmentByChildAndRound_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindEnrollmentByChildAndRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstname()) {
          optionals.set(0);
        }
        if (struct.isSetLastname()) {
          optionals.set(1);
        }
        if (struct.isSetRoundName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFirstname()) {
          oprot.writeString(struct.firstname);
        }
        if (struct.isSetLastname()) {
          oprot.writeString(struct.lastname);
        }
        if (struct.isSetRoundName()) {
          oprot.writeString(struct.roundName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindEnrollmentByChildAndRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.firstname = iprot.readString();
          struct.setFirstnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastname = iprot.readString();
          struct.setLastnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.roundName = iprot.readString();
          struct.setRoundNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindEnrollmentByChildAndRound_result implements org.apache.thrift.TBase<FindEnrollmentByChildAndRound_result, FindEnrollmentByChildAndRound_result._Fields>, java.io.Serializable, Cloneable, Comparable<FindEnrollmentByChildAndRound_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindEnrollmentByChildAndRound_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindEnrollmentByChildAndRound_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindEnrollmentByChildAndRound_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Enrollment success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Enrollment.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindEnrollmentByChildAndRound_result.class, metaDataMap);
    }

    public FindEnrollmentByChildAndRound_result() {
    }

    public FindEnrollmentByChildAndRound_result(
      Enrollment success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindEnrollmentByChildAndRound_result(FindEnrollmentByChildAndRound_result other) {
      if (other.isSetSuccess()) {
        this.success = new Enrollment(other.success);
      }
    }

    public FindEnrollmentByChildAndRound_result deepCopy() {
      return new FindEnrollmentByChildAndRound_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Enrollment getSuccess() {
      return this.success;
    }

    public FindEnrollmentByChildAndRound_result setSuccess(@org.apache.thrift.annotation.Nullable Enrollment success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Enrollment)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindEnrollmentByChildAndRound_result)
        return this.equals((FindEnrollmentByChildAndRound_result)that);
      return false;
    }

    public boolean equals(FindEnrollmentByChildAndRound_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindEnrollmentByChildAndRound_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindEnrollmentByChildAndRound_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindEnrollmentByChildAndRound_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindEnrollmentByChildAndRound_resultStandardScheme getScheme() {
        return new FindEnrollmentByChildAndRound_resultStandardScheme();
      }
    }

    private static class FindEnrollmentByChildAndRound_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindEnrollmentByChildAndRound_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindEnrollmentByChildAndRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Enrollment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindEnrollmentByChildAndRound_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindEnrollmentByChildAndRound_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindEnrollmentByChildAndRound_resultTupleScheme getScheme() {
        return new FindEnrollmentByChildAndRound_resultTupleScheme();
      }
    }

    private static class FindEnrollmentByChildAndRound_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindEnrollmentByChildAndRound_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindEnrollmentByChildAndRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindEnrollmentByChildAndRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Enrollment();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SaveChild_args implements org.apache.thrift.TBase<SaveChild_args, SaveChild_args._Fields>, java.io.Serializable, Cloneable, Comparable<SaveChild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SaveChild_args");

    private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SaveChild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SaveChild_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String firstname; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String lastname; // required
    public int age; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRSTNAME((short)1, "firstname"),
      LASTNAME((short)2, "lastname"),
      AGE((short)3, "age");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRSTNAME
            return FIRSTNAME;
          case 2: // LASTNAME
            return LASTNAME;
          case 3: // AGE
            return AGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SaveChild_args.class, metaDataMap);
    }

    public SaveChild_args() {
    }

    public SaveChild_args(
      java.lang.String firstname,
      java.lang.String lastname,
      int age)
    {
      this();
      this.firstname = firstname;
      this.lastname = lastname;
      this.age = age;
      setAgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SaveChild_args(SaveChild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFirstname()) {
        this.firstname = other.firstname;
      }
      if (other.isSetLastname()) {
        this.lastname = other.lastname;
      }
      this.age = other.age;
    }

    public SaveChild_args deepCopy() {
      return new SaveChild_args(this);
    }

    @Override
    public void clear() {
      this.firstname = null;
      this.lastname = null;
      setAgeIsSet(false);
      this.age = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFirstname() {
      return this.firstname;
    }

    public SaveChild_args setFirstname(@org.apache.thrift.annotation.Nullable java.lang.String firstname) {
      this.firstname = firstname;
      return this;
    }

    public void unsetFirstname() {
      this.firstname = null;
    }

    /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstname() {
      return this.firstname != null;
    }

    public void setFirstnameIsSet(boolean value) {
      if (!value) {
        this.firstname = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLastname() {
      return this.lastname;
    }

    public SaveChild_args setLastname(@org.apache.thrift.annotation.Nullable java.lang.String lastname) {
      this.lastname = lastname;
      return this;
    }

    public void unsetLastname() {
      this.lastname = null;
    }

    /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
    public boolean isSetLastname() {
      return this.lastname != null;
    }

    public void setLastnameIsSet(boolean value) {
      if (!value) {
        this.lastname = null;
      }
    }

    public int getAge() {
      return this.age;
    }

    public SaveChild_args setAge(int age) {
      this.age = age;
      setAgeIsSet(true);
      return this;
    }

    public void unsetAge() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    /** Returns true if field age is set (has been assigned a value) and false otherwise */
    public boolean isSetAge() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    public void setAgeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRSTNAME:
        if (value == null) {
          unsetFirstname();
        } else {
          setFirstname((java.lang.String)value);
        }
        break;

      case LASTNAME:
        if (value == null) {
          unsetLastname();
        } else {
          setLastname((java.lang.String)value);
        }
        break;

      case AGE:
        if (value == null) {
          unsetAge();
        } else {
          setAge((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRSTNAME:
        return getFirstname();

      case LASTNAME:
        return getLastname();

      case AGE:
        return getAge();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRSTNAME:
        return isSetFirstname();
      case LASTNAME:
        return isSetLastname();
      case AGE:
        return isSetAge();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SaveChild_args)
        return this.equals((SaveChild_args)that);
      return false;
    }

    public boolean equals(SaveChild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstname = true && this.isSetFirstname();
      boolean that_present_firstname = true && that.isSetFirstname();
      if (this_present_firstname || that_present_firstname) {
        if (!(this_present_firstname && that_present_firstname))
          return false;
        if (!this.firstname.equals(that.firstname))
          return false;
      }

      boolean this_present_lastname = true && this.isSetLastname();
      boolean that_present_lastname = true && that.isSetLastname();
      if (this_present_lastname || that_present_lastname) {
        if (!(this_present_lastname && that_present_lastname))
          return false;
        if (!this.lastname.equals(that.lastname))
          return false;
      }

      boolean this_present_age = true;
      boolean that_present_age = true;
      if (this_present_age || that_present_age) {
        if (!(this_present_age && that_present_age))
          return false;
        if (this.age != that.age)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstname()) ? 131071 : 524287);
      if (isSetFirstname())
        hashCode = hashCode * 8191 + firstname.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastname()) ? 131071 : 524287);
      if (isSetLastname())
        hashCode = hashCode * 8191 + lastname.hashCode();

      hashCode = hashCode * 8191 + age;

      return hashCode;
    }

    @Override
    public int compareTo(SaveChild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SaveChild_args(");
      boolean first = true;

      sb.append("firstname:");
      if (this.firstname == null) {
        sb.append("null");
      } else {
        sb.append(this.firstname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastname:");
      if (this.lastname == null) {
        sb.append("null");
      } else {
        sb.append(this.lastname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SaveChild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveChild_argsStandardScheme getScheme() {
        return new SaveChild_argsStandardScheme();
      }
    }

    private static class SaveChild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SaveChild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SaveChild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstname = iprot.readString();
                struct.setFirstnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LASTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastname = iprot.readString();
                struct.setLastnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.age = iprot.readI32();
                struct.setAgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SaveChild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstname != null) {
          oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
          oprot.writeString(struct.firstname);
          oprot.writeFieldEnd();
        }
        if (struct.lastname != null) {
          oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
          oprot.writeString(struct.lastname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI32(struct.age);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SaveChild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveChild_argsTupleScheme getScheme() {
        return new SaveChild_argsTupleScheme();
      }
    }

    private static class SaveChild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SaveChild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SaveChild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstname()) {
          optionals.set(0);
        }
        if (struct.isSetLastname()) {
          optionals.set(1);
        }
        if (struct.isSetAge()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFirstname()) {
          oprot.writeString(struct.firstname);
        }
        if (struct.isSetLastname()) {
          oprot.writeString(struct.lastname);
        }
        if (struct.isSetAge()) {
          oprot.writeI32(struct.age);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SaveChild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.firstname = iprot.readString();
          struct.setFirstnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastname = iprot.readString();
          struct.setLastnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.age = iprot.readI32();
          struct.setAgeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SaveChild_result implements org.apache.thrift.TBase<SaveChild_result, SaveChild_result._Fields>, java.io.Serializable, Cloneable, Comparable<SaveChild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SaveChild_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SaveChild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SaveChild_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Child success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Child.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SaveChild_result.class, metaDataMap);
    }

    public SaveChild_result() {
    }

    public SaveChild_result(
      Child success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SaveChild_result(SaveChild_result other) {
      if (other.isSetSuccess()) {
        this.success = new Child(other.success);
      }
    }

    public SaveChild_result deepCopy() {
      return new SaveChild_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Child getSuccess() {
      return this.success;
    }

    public SaveChild_result setSuccess(@org.apache.thrift.annotation.Nullable Child success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Child)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SaveChild_result)
        return this.equals((SaveChild_result)that);
      return false;
    }

    public boolean equals(SaveChild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SaveChild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SaveChild_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SaveChild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveChild_resultStandardScheme getScheme() {
        return new SaveChild_resultStandardScheme();
      }
    }

    private static class SaveChild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SaveChild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SaveChild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Child();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SaveChild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SaveChild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveChild_resultTupleScheme getScheme() {
        return new SaveChild_resultTupleScheme();
      }
    }

    private static class SaveChild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SaveChild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SaveChild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SaveChild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Child();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findChildrenForRound_args implements org.apache.thrift.TBase<findChildrenForRound_args, findChildrenForRound_args._Fields>, java.io.Serializable, Cloneable, Comparable<findChildrenForRound_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildrenForRound_args");

    private static final org.apache.thrift.protocol.TField ROUND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roundName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findChildrenForRound_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findChildrenForRound_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String roundName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUND_NAME((short)1, "roundName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUND_NAME
            return ROUND_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUND_NAME, new org.apache.thrift.meta_data.FieldMetaData("roundName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildrenForRound_args.class, metaDataMap);
    }

    public findChildrenForRound_args() {
    }

    public findChildrenForRound_args(
      java.lang.String roundName)
    {
      this();
      this.roundName = roundName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildrenForRound_args(findChildrenForRound_args other) {
      if (other.isSetRoundName()) {
        this.roundName = other.roundName;
      }
    }

    public findChildrenForRound_args deepCopy() {
      return new findChildrenForRound_args(this);
    }

    @Override
    public void clear() {
      this.roundName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRoundName() {
      return this.roundName;
    }

    public findChildrenForRound_args setRoundName(@org.apache.thrift.annotation.Nullable java.lang.String roundName) {
      this.roundName = roundName;
      return this;
    }

    public void unsetRoundName() {
      this.roundName = null;
    }

    /** Returns true if field roundName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundName() {
      return this.roundName != null;
    }

    public void setRoundNameIsSet(boolean value) {
      if (!value) {
        this.roundName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROUND_NAME:
        if (value == null) {
          unsetRoundName();
        } else {
          setRoundName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUND_NAME:
        return getRoundName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROUND_NAME:
        return isSetRoundName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildrenForRound_args)
        return this.equals((findChildrenForRound_args)that);
      return false;
    }

    public boolean equals(findChildrenForRound_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roundName = true && this.isSetRoundName();
      boolean that_present_roundName = true && that.isSetRoundName();
      if (this_present_roundName || that_present_roundName) {
        if (!(this_present_roundName && that_present_roundName))
          return false;
        if (!this.roundName.equals(that.roundName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRoundName()) ? 131071 : 524287);
      if (isSetRoundName())
        hashCode = hashCode * 8191 + roundName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findChildrenForRound_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoundName()).compareTo(other.isSetRoundName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundName, other.roundName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findChildrenForRound_args(");
      boolean first = true;

      sb.append("roundName:");
      if (this.roundName == null) {
        sb.append("null");
      } else {
        sb.append(this.roundName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildrenForRound_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildrenForRound_argsStandardScheme getScheme() {
        return new findChildrenForRound_argsStandardScheme();
      }
    }

    private static class findChildrenForRound_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findChildrenForRound_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildrenForRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roundName = iprot.readString();
                struct.setRoundNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildrenForRound_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roundName != null) {
          oprot.writeFieldBegin(ROUND_NAME_FIELD_DESC);
          oprot.writeString(struct.roundName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildrenForRound_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildrenForRound_argsTupleScheme getScheme() {
        return new findChildrenForRound_argsTupleScheme();
      }
    }

    private static class findChildrenForRound_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findChildrenForRound_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildrenForRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoundName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoundName()) {
          oprot.writeString(struct.roundName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildrenForRound_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roundName = iprot.readString();
          struct.setRoundNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findChildrenForRound_result implements org.apache.thrift.TBase<findChildrenForRound_result, findChildrenForRound_result._Fields>, java.io.Serializable, Cloneable, Comparable<findChildrenForRound_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildrenForRound_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findChildrenForRound_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findChildrenForRound_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Child> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Child.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildrenForRound_result.class, metaDataMap);
    }

    public findChildrenForRound_result() {
    }

    public findChildrenForRound_result(
      java.util.List<Child> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildrenForRound_result(findChildrenForRound_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Child> __this__success = new java.util.ArrayList<Child>(other.success.size());
        for (Child other_element : other.success) {
          __this__success.add(new Child(other_element));
        }
        this.success = __this__success;
      }
    }

    public findChildrenForRound_result deepCopy() {
      return new findChildrenForRound_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Child> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Child elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Child>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Child> getSuccess() {
      return this.success;
    }

    public findChildrenForRound_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Child> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Child>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildrenForRound_result)
        return this.equals((findChildrenForRound_result)that);
      return false;
    }

    public boolean equals(findChildrenForRound_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findChildrenForRound_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findChildrenForRound_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildrenForRound_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildrenForRound_resultStandardScheme getScheme() {
        return new findChildrenForRound_resultStandardScheme();
      }
    }

    private static class findChildrenForRound_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findChildrenForRound_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildrenForRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Child>(_list8.size);
                  @org.apache.thrift.annotation.Nullable Child _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Child();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildrenForRound_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Child _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildrenForRound_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildrenForRound_resultTupleScheme getScheme() {
        return new findChildrenForRound_resultTupleScheme();
      }
    }

    private static class findChildrenForRound_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findChildrenForRound_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildrenForRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Child _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildrenForRound_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Child>(_list13.size);
            @org.apache.thrift.annotation.Nullable Child _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Child();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindChildByName_args implements org.apache.thrift.TBase<FindChildByName_args, FindChildByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<FindChildByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindChildByName_args");

    private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindChildByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindChildByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String firstname; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String lastname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRSTNAME((short)1, "firstname"),
      LASTNAME((short)2, "lastname");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRSTNAME
            return FIRSTNAME;
          case 2: // LASTNAME
            return LASTNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindChildByName_args.class, metaDataMap);
    }

    public FindChildByName_args() {
    }

    public FindChildByName_args(
      java.lang.String firstname,
      java.lang.String lastname)
    {
      this();
      this.firstname = firstname;
      this.lastname = lastname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindChildByName_args(FindChildByName_args other) {
      if (other.isSetFirstname()) {
        this.firstname = other.firstname;
      }
      if (other.isSetLastname()) {
        this.lastname = other.lastname;
      }
    }

    public FindChildByName_args deepCopy() {
      return new FindChildByName_args(this);
    }

    @Override
    public void clear() {
      this.firstname = null;
      this.lastname = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFirstname() {
      return this.firstname;
    }

    public FindChildByName_args setFirstname(@org.apache.thrift.annotation.Nullable java.lang.String firstname) {
      this.firstname = firstname;
      return this;
    }

    public void unsetFirstname() {
      this.firstname = null;
    }

    /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstname() {
      return this.firstname != null;
    }

    public void setFirstnameIsSet(boolean value) {
      if (!value) {
        this.firstname = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLastname() {
      return this.lastname;
    }

    public FindChildByName_args setLastname(@org.apache.thrift.annotation.Nullable java.lang.String lastname) {
      this.lastname = lastname;
      return this;
    }

    public void unsetLastname() {
      this.lastname = null;
    }

    /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
    public boolean isSetLastname() {
      return this.lastname != null;
    }

    public void setLastnameIsSet(boolean value) {
      if (!value) {
        this.lastname = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRSTNAME:
        if (value == null) {
          unsetFirstname();
        } else {
          setFirstname((java.lang.String)value);
        }
        break;

      case LASTNAME:
        if (value == null) {
          unsetLastname();
        } else {
          setLastname((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRSTNAME:
        return getFirstname();

      case LASTNAME:
        return getLastname();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRSTNAME:
        return isSetFirstname();
      case LASTNAME:
        return isSetLastname();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindChildByName_args)
        return this.equals((FindChildByName_args)that);
      return false;
    }

    public boolean equals(FindChildByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstname = true && this.isSetFirstname();
      boolean that_present_firstname = true && that.isSetFirstname();
      if (this_present_firstname || that_present_firstname) {
        if (!(this_present_firstname && that_present_firstname))
          return false;
        if (!this.firstname.equals(that.firstname))
          return false;
      }

      boolean this_present_lastname = true && this.isSetLastname();
      boolean that_present_lastname = true && that.isSetLastname();
      if (this_present_lastname || that_present_lastname) {
        if (!(this_present_lastname && that_present_lastname))
          return false;
        if (!this.lastname.equals(that.lastname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstname()) ? 131071 : 524287);
      if (isSetFirstname())
        hashCode = hashCode * 8191 + firstname.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastname()) ? 131071 : 524287);
      if (isSetLastname())
        hashCode = hashCode * 8191 + lastname.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindChildByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindChildByName_args(");
      boolean first = true;

      sb.append("firstname:");
      if (this.firstname == null) {
        sb.append("null");
      } else {
        sb.append(this.firstname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastname:");
      if (this.lastname == null) {
        sb.append("null");
      } else {
        sb.append(this.lastname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindChildByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildByName_argsStandardScheme getScheme() {
        return new FindChildByName_argsStandardScheme();
      }
    }

    private static class FindChildByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindChildByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindChildByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstname = iprot.readString();
                struct.setFirstnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LASTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastname = iprot.readString();
                struct.setLastnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindChildByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstname != null) {
          oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
          oprot.writeString(struct.firstname);
          oprot.writeFieldEnd();
        }
        if (struct.lastname != null) {
          oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
          oprot.writeString(struct.lastname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindChildByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildByName_argsTupleScheme getScheme() {
        return new FindChildByName_argsTupleScheme();
      }
    }

    private static class FindChildByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindChildByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindChildByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstname()) {
          optionals.set(0);
        }
        if (struct.isSetLastname()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstname()) {
          oprot.writeString(struct.firstname);
        }
        if (struct.isSetLastname()) {
          oprot.writeString(struct.lastname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindChildByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstname = iprot.readString();
          struct.setFirstnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastname = iprot.readString();
          struct.setLastnameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindChildByName_result implements org.apache.thrift.TBase<FindChildByName_result, FindChildByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<FindChildByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindChildByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindChildByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindChildByName_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Child success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Child.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindChildByName_result.class, metaDataMap);
    }

    public FindChildByName_result() {
    }

    public FindChildByName_result(
      Child success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindChildByName_result(FindChildByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new Child(other.success);
      }
    }

    public FindChildByName_result deepCopy() {
      return new FindChildByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Child getSuccess() {
      return this.success;
    }

    public FindChildByName_result setSuccess(@org.apache.thrift.annotation.Nullable Child success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Child)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindChildByName_result)
        return this.equals((FindChildByName_result)that);
      return false;
    }

    public boolean equals(FindChildByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindChildByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindChildByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindChildByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildByName_resultStandardScheme getScheme() {
        return new FindChildByName_resultStandardScheme();
      }
    }

    private static class FindChildByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindChildByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindChildByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Child();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindChildByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindChildByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildByName_resultTupleScheme getScheme() {
        return new FindChildByName_resultTupleScheme();
      }
    }

    private static class FindChildByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindChildByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindChildByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindChildByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Child();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindChildrenByAgeGroup_args implements org.apache.thrift.TBase<FindChildrenByAgeGroup_args, FindChildrenByAgeGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<FindChildrenByAgeGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindChildrenByAgeGroup_args");

    private static final org.apache.thrift.protocol.TField AGE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("ageGroup", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindChildrenByAgeGroup_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindChildrenByAgeGroup_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String ageGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGE_GROUP((short)1, "ageGroup");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGE_GROUP
            return AGE_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("ageGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindChildrenByAgeGroup_args.class, metaDataMap);
    }

    public FindChildrenByAgeGroup_args() {
    }

    public FindChildrenByAgeGroup_args(
      java.lang.String ageGroup)
    {
      this();
      this.ageGroup = ageGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindChildrenByAgeGroup_args(FindChildrenByAgeGroup_args other) {
      if (other.isSetAgeGroup()) {
        this.ageGroup = other.ageGroup;
      }
    }

    public FindChildrenByAgeGroup_args deepCopy() {
      return new FindChildrenByAgeGroup_args(this);
    }

    @Override
    public void clear() {
      this.ageGroup = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAgeGroup() {
      return this.ageGroup;
    }

    public FindChildrenByAgeGroup_args setAgeGroup(@org.apache.thrift.annotation.Nullable java.lang.String ageGroup) {
      this.ageGroup = ageGroup;
      return this;
    }

    public void unsetAgeGroup() {
      this.ageGroup = null;
    }

    /** Returns true if field ageGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeGroup() {
      return this.ageGroup != null;
    }

    public void setAgeGroupIsSet(boolean value) {
      if (!value) {
        this.ageGroup = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AGE_GROUP:
        if (value == null) {
          unsetAgeGroup();
        } else {
          setAgeGroup((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AGE_GROUP:
        return getAgeGroup();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AGE_GROUP:
        return isSetAgeGroup();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindChildrenByAgeGroup_args)
        return this.equals((FindChildrenByAgeGroup_args)that);
      return false;
    }

    public boolean equals(FindChildrenByAgeGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ageGroup = true && this.isSetAgeGroup();
      boolean that_present_ageGroup = true && that.isSetAgeGroup();
      if (this_present_ageGroup || that_present_ageGroup) {
        if (!(this_present_ageGroup && that_present_ageGroup))
          return false;
        if (!this.ageGroup.equals(that.ageGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAgeGroup()) ? 131071 : 524287);
      if (isSetAgeGroup())
        hashCode = hashCode * 8191 + ageGroup.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindChildrenByAgeGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAgeGroup()).compareTo(other.isSetAgeGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageGroup, other.ageGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindChildrenByAgeGroup_args(");
      boolean first = true;

      sb.append("ageGroup:");
      if (this.ageGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.ageGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindChildrenByAgeGroup_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildrenByAgeGroup_argsStandardScheme getScheme() {
        return new FindChildrenByAgeGroup_argsStandardScheme();
      }
    }

    private static class FindChildrenByAgeGroup_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindChildrenByAgeGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindChildrenByAgeGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGE_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ageGroup = iprot.readString();
                struct.setAgeGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindChildrenByAgeGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ageGroup != null) {
          oprot.writeFieldBegin(AGE_GROUP_FIELD_DESC);
          oprot.writeString(struct.ageGroup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindChildrenByAgeGroup_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildrenByAgeGroup_argsTupleScheme getScheme() {
        return new FindChildrenByAgeGroup_argsTupleScheme();
      }
    }

    private static class FindChildrenByAgeGroup_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindChildrenByAgeGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindChildrenByAgeGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAgeGroup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAgeGroup()) {
          oprot.writeString(struct.ageGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindChildrenByAgeGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ageGroup = iprot.readString();
          struct.setAgeGroupIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindChildrenByAgeGroup_result implements org.apache.thrift.TBase<FindChildrenByAgeGroup_result, FindChildrenByAgeGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<FindChildrenByAgeGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindChildrenByAgeGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindChildrenByAgeGroup_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindChildrenByAgeGroup_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Child> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Child.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindChildrenByAgeGroup_result.class, metaDataMap);
    }

    public FindChildrenByAgeGroup_result() {
    }

    public FindChildrenByAgeGroup_result(
      java.util.List<Child> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindChildrenByAgeGroup_result(FindChildrenByAgeGroup_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Child> __this__success = new java.util.ArrayList<Child>(other.success.size());
        for (Child other_element : other.success) {
          __this__success.add(new Child(other_element));
        }
        this.success = __this__success;
      }
    }

    public FindChildrenByAgeGroup_result deepCopy() {
      return new FindChildrenByAgeGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Child> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Child elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Child>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Child> getSuccess() {
      return this.success;
    }

    public FindChildrenByAgeGroup_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Child> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Child>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindChildrenByAgeGroup_result)
        return this.equals((FindChildrenByAgeGroup_result)that);
      return false;
    }

    public boolean equals(FindChildrenByAgeGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindChildrenByAgeGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindChildrenByAgeGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindChildrenByAgeGroup_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildrenByAgeGroup_resultStandardScheme getScheme() {
        return new FindChildrenByAgeGroup_resultStandardScheme();
      }
    }

    private static class FindChildrenByAgeGroup_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindChildrenByAgeGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindChildrenByAgeGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Child>(_list16.size);
                  @org.apache.thrift.annotation.Nullable Child _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Child();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindChildrenByAgeGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Child _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindChildrenByAgeGroup_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindChildrenByAgeGroup_resultTupleScheme getScheme() {
        return new FindChildrenByAgeGroup_resultTupleScheme();
      }
    }

    private static class FindChildrenByAgeGroup_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindChildrenByAgeGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindChildrenByAgeGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Child _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindChildrenByAgeGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Child>(_list21.size);
            @org.apache.thrift.annotation.Nullable Child _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Child();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SaveEnrollment_args implements org.apache.thrift.TBase<SaveEnrollment_args, SaveEnrollment_args._Fields>, java.io.Serializable, Cloneable, Comparable<SaveEnrollment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SaveEnrollment_args");

    private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ROUND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roundName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SaveEnrollment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SaveEnrollment_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String firstname; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String lastname; // required
    public int age; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String roundName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRSTNAME((short)1, "firstname"),
      LASTNAME((short)2, "lastname"),
      AGE((short)3, "age"),
      ROUND_NAME((short)4, "roundName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRSTNAME
            return FIRSTNAME;
          case 2: // LASTNAME
            return LASTNAME;
          case 3: // AGE
            return AGE;
          case 4: // ROUND_NAME
            return ROUND_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROUND_NAME, new org.apache.thrift.meta_data.FieldMetaData("roundName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SaveEnrollment_args.class, metaDataMap);
    }

    public SaveEnrollment_args() {
    }

    public SaveEnrollment_args(
      java.lang.String firstname,
      java.lang.String lastname,
      int age,
      java.lang.String roundName)
    {
      this();
      this.firstname = firstname;
      this.lastname = lastname;
      this.age = age;
      setAgeIsSet(true);
      this.roundName = roundName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SaveEnrollment_args(SaveEnrollment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFirstname()) {
        this.firstname = other.firstname;
      }
      if (other.isSetLastname()) {
        this.lastname = other.lastname;
      }
      this.age = other.age;
      if (other.isSetRoundName()) {
        this.roundName = other.roundName;
      }
    }

    public SaveEnrollment_args deepCopy() {
      return new SaveEnrollment_args(this);
    }

    @Override
    public void clear() {
      this.firstname = null;
      this.lastname = null;
      setAgeIsSet(false);
      this.age = 0;
      this.roundName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFirstname() {
      return this.firstname;
    }

    public SaveEnrollment_args setFirstname(@org.apache.thrift.annotation.Nullable java.lang.String firstname) {
      this.firstname = firstname;
      return this;
    }

    public void unsetFirstname() {
      this.firstname = null;
    }

    /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstname() {
      return this.firstname != null;
    }

    public void setFirstnameIsSet(boolean value) {
      if (!value) {
        this.firstname = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLastname() {
      return this.lastname;
    }

    public SaveEnrollment_args setLastname(@org.apache.thrift.annotation.Nullable java.lang.String lastname) {
      this.lastname = lastname;
      return this;
    }

    public void unsetLastname() {
      this.lastname = null;
    }

    /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
    public boolean isSetLastname() {
      return this.lastname != null;
    }

    public void setLastnameIsSet(boolean value) {
      if (!value) {
        this.lastname = null;
      }
    }

    public int getAge() {
      return this.age;
    }

    public SaveEnrollment_args setAge(int age) {
      this.age = age;
      setAgeIsSet(true);
      return this;
    }

    public void unsetAge() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    /** Returns true if field age is set (has been assigned a value) and false otherwise */
    public boolean isSetAge() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    public void setAgeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRoundName() {
      return this.roundName;
    }

    public SaveEnrollment_args setRoundName(@org.apache.thrift.annotation.Nullable java.lang.String roundName) {
      this.roundName = roundName;
      return this;
    }

    public void unsetRoundName() {
      this.roundName = null;
    }

    /** Returns true if field roundName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundName() {
      return this.roundName != null;
    }

    public void setRoundNameIsSet(boolean value) {
      if (!value) {
        this.roundName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRSTNAME:
        if (value == null) {
          unsetFirstname();
        } else {
          setFirstname((java.lang.String)value);
        }
        break;

      case LASTNAME:
        if (value == null) {
          unsetLastname();
        } else {
          setLastname((java.lang.String)value);
        }
        break;

      case AGE:
        if (value == null) {
          unsetAge();
        } else {
          setAge((java.lang.Integer)value);
        }
        break;

      case ROUND_NAME:
        if (value == null) {
          unsetRoundName();
        } else {
          setRoundName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRSTNAME:
        return getFirstname();

      case LASTNAME:
        return getLastname();

      case AGE:
        return getAge();

      case ROUND_NAME:
        return getRoundName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRSTNAME:
        return isSetFirstname();
      case LASTNAME:
        return isSetLastname();
      case AGE:
        return isSetAge();
      case ROUND_NAME:
        return isSetRoundName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SaveEnrollment_args)
        return this.equals((SaveEnrollment_args)that);
      return false;
    }

    public boolean equals(SaveEnrollment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstname = true && this.isSetFirstname();
      boolean that_present_firstname = true && that.isSetFirstname();
      if (this_present_firstname || that_present_firstname) {
        if (!(this_present_firstname && that_present_firstname))
          return false;
        if (!this.firstname.equals(that.firstname))
          return false;
      }

      boolean this_present_lastname = true && this.isSetLastname();
      boolean that_present_lastname = true && that.isSetLastname();
      if (this_present_lastname || that_present_lastname) {
        if (!(this_present_lastname && that_present_lastname))
          return false;
        if (!this.lastname.equals(that.lastname))
          return false;
      }

      boolean this_present_age = true;
      boolean that_present_age = true;
      if (this_present_age || that_present_age) {
        if (!(this_present_age && that_present_age))
          return false;
        if (this.age != that.age)
          return false;
      }

      boolean this_present_roundName = true && this.isSetRoundName();
      boolean that_present_roundName = true && that.isSetRoundName();
      if (this_present_roundName || that_present_roundName) {
        if (!(this_present_roundName && that_present_roundName))
          return false;
        if (!this.roundName.equals(that.roundName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstname()) ? 131071 : 524287);
      if (isSetFirstname())
        hashCode = hashCode * 8191 + firstname.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastname()) ? 131071 : 524287);
      if (isSetLastname())
        hashCode = hashCode * 8191 + lastname.hashCode();

      hashCode = hashCode * 8191 + age;

      hashCode = hashCode * 8191 + ((isSetRoundName()) ? 131071 : 524287);
      if (isSetRoundName())
        hashCode = hashCode * 8191 + roundName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SaveEnrollment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoundName()).compareTo(other.isSetRoundName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundName, other.roundName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SaveEnrollment_args(");
      boolean first = true;

      sb.append("firstname:");
      if (this.firstname == null) {
        sb.append("null");
      } else {
        sb.append(this.firstname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastname:");
      if (this.lastname == null) {
        sb.append("null");
      } else {
        sb.append(this.lastname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roundName:");
      if (this.roundName == null) {
        sb.append("null");
      } else {
        sb.append(this.roundName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SaveEnrollment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveEnrollment_argsStandardScheme getScheme() {
        return new SaveEnrollment_argsStandardScheme();
      }
    }

    private static class SaveEnrollment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SaveEnrollment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SaveEnrollment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstname = iprot.readString();
                struct.setFirstnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LASTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastname = iprot.readString();
                struct.setLastnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.age = iprot.readI32();
                struct.setAgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROUND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roundName = iprot.readString();
                struct.setRoundNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SaveEnrollment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstname != null) {
          oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
          oprot.writeString(struct.firstname);
          oprot.writeFieldEnd();
        }
        if (struct.lastname != null) {
          oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
          oprot.writeString(struct.lastname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI32(struct.age);
        oprot.writeFieldEnd();
        if (struct.roundName != null) {
          oprot.writeFieldBegin(ROUND_NAME_FIELD_DESC);
          oprot.writeString(struct.roundName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SaveEnrollment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveEnrollment_argsTupleScheme getScheme() {
        return new SaveEnrollment_argsTupleScheme();
      }
    }

    private static class SaveEnrollment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SaveEnrollment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SaveEnrollment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstname()) {
          optionals.set(0);
        }
        if (struct.isSetLastname()) {
          optionals.set(1);
        }
        if (struct.isSetAge()) {
          optionals.set(2);
        }
        if (struct.isSetRoundName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFirstname()) {
          oprot.writeString(struct.firstname);
        }
        if (struct.isSetLastname()) {
          oprot.writeString(struct.lastname);
        }
        if (struct.isSetAge()) {
          oprot.writeI32(struct.age);
        }
        if (struct.isSetRoundName()) {
          oprot.writeString(struct.roundName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SaveEnrollment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.firstname = iprot.readString();
          struct.setFirstnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastname = iprot.readString();
          struct.setLastnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.age = iprot.readI32();
          struct.setAgeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.roundName = iprot.readString();
          struct.setRoundNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class SaveEnrollment_result implements org.apache.thrift.TBase<SaveEnrollment_result, SaveEnrollment_result._Fields>, java.io.Serializable, Cloneable, Comparable<SaveEnrollment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SaveEnrollment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SaveEnrollment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SaveEnrollment_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Enrollment success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Enrollment.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SaveEnrollment_result.class, metaDataMap);
    }

    public SaveEnrollment_result() {
    }

    public SaveEnrollment_result(
      Enrollment success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SaveEnrollment_result(SaveEnrollment_result other) {
      if (other.isSetSuccess()) {
        this.success = new Enrollment(other.success);
      }
    }

    public SaveEnrollment_result deepCopy() {
      return new SaveEnrollment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Enrollment getSuccess() {
      return this.success;
    }

    public SaveEnrollment_result setSuccess(@org.apache.thrift.annotation.Nullable Enrollment success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Enrollment)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof SaveEnrollment_result)
        return this.equals((SaveEnrollment_result)that);
      return false;
    }

    public boolean equals(SaveEnrollment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SaveEnrollment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SaveEnrollment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SaveEnrollment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveEnrollment_resultStandardScheme getScheme() {
        return new SaveEnrollment_resultStandardScheme();
      }
    }

    private static class SaveEnrollment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SaveEnrollment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SaveEnrollment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Enrollment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SaveEnrollment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SaveEnrollment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public SaveEnrollment_resultTupleScheme getScheme() {
        return new SaveEnrollment_resultTupleScheme();
      }
    }

    private static class SaveEnrollment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SaveEnrollment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SaveEnrollment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SaveEnrollment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Enrollment();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindNumberOfEnrollmentsForChild_args implements org.apache.thrift.TBase<FindNumberOfEnrollmentsForChild_args, FindNumberOfEnrollmentsForChild_args._Fields>, java.io.Serializable, Cloneable, Comparable<FindNumberOfEnrollmentsForChild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindNumberOfEnrollmentsForChild_args");

    private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindNumberOfEnrollmentsForChild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindNumberOfEnrollmentsForChild_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String firstname; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String lastname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRSTNAME((short)1, "firstname"),
      LASTNAME((short)2, "lastname");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRSTNAME
            return FIRSTNAME;
          case 2: // LASTNAME
            return LASTNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindNumberOfEnrollmentsForChild_args.class, metaDataMap);
    }

    public FindNumberOfEnrollmentsForChild_args() {
    }

    public FindNumberOfEnrollmentsForChild_args(
      java.lang.String firstname,
      java.lang.String lastname)
    {
      this();
      this.firstname = firstname;
      this.lastname = lastname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindNumberOfEnrollmentsForChild_args(FindNumberOfEnrollmentsForChild_args other) {
      if (other.isSetFirstname()) {
        this.firstname = other.firstname;
      }
      if (other.isSetLastname()) {
        this.lastname = other.lastname;
      }
    }

    public FindNumberOfEnrollmentsForChild_args deepCopy() {
      return new FindNumberOfEnrollmentsForChild_args(this);
    }

    @Override
    public void clear() {
      this.firstname = null;
      this.lastname = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFirstname() {
      return this.firstname;
    }

    public FindNumberOfEnrollmentsForChild_args setFirstname(@org.apache.thrift.annotation.Nullable java.lang.String firstname) {
      this.firstname = firstname;
      return this;
    }

    public void unsetFirstname() {
      this.firstname = null;
    }

    /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstname() {
      return this.firstname != null;
    }

    public void setFirstnameIsSet(boolean value) {
      if (!value) {
        this.firstname = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLastname() {
      return this.lastname;
    }

    public FindNumberOfEnrollmentsForChild_args setLastname(@org.apache.thrift.annotation.Nullable java.lang.String lastname) {
      this.lastname = lastname;
      return this;
    }

    public void unsetLastname() {
      this.lastname = null;
    }

    /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
    public boolean isSetLastname() {
      return this.lastname != null;
    }

    public void setLastnameIsSet(boolean value) {
      if (!value) {
        this.lastname = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRSTNAME:
        if (value == null) {
          unsetFirstname();
        } else {
          setFirstname((java.lang.String)value);
        }
        break;

      case LASTNAME:
        if (value == null) {
          unsetLastname();
        } else {
          setLastname((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRSTNAME:
        return getFirstname();

      case LASTNAME:
        return getLastname();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRSTNAME:
        return isSetFirstname();
      case LASTNAME:
        return isSetLastname();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindNumberOfEnrollmentsForChild_args)
        return this.equals((FindNumberOfEnrollmentsForChild_args)that);
      return false;
    }

    public boolean equals(FindNumberOfEnrollmentsForChild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstname = true && this.isSetFirstname();
      boolean that_present_firstname = true && that.isSetFirstname();
      if (this_present_firstname || that_present_firstname) {
        if (!(this_present_firstname && that_present_firstname))
          return false;
        if (!this.firstname.equals(that.firstname))
          return false;
      }

      boolean this_present_lastname = true && this.isSetLastname();
      boolean that_present_lastname = true && that.isSetLastname();
      if (this_present_lastname || that_present_lastname) {
        if (!(this_present_lastname && that_present_lastname))
          return false;
        if (!this.lastname.equals(that.lastname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFirstname()) ? 131071 : 524287);
      if (isSetFirstname())
        hashCode = hashCode * 8191 + firstname.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastname()) ? 131071 : 524287);
      if (isSetLastname())
        hashCode = hashCode * 8191 + lastname.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FindNumberOfEnrollmentsForChild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindNumberOfEnrollmentsForChild_args(");
      boolean first = true;

      sb.append("firstname:");
      if (this.firstname == null) {
        sb.append("null");
      } else {
        sb.append(this.firstname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastname:");
      if (this.lastname == null) {
        sb.append("null");
      } else {
        sb.append(this.lastname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindNumberOfEnrollmentsForChild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindNumberOfEnrollmentsForChild_argsStandardScheme getScheme() {
        return new FindNumberOfEnrollmentsForChild_argsStandardScheme();
      }
    }

    private static class FindNumberOfEnrollmentsForChild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindNumberOfEnrollmentsForChild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindNumberOfEnrollmentsForChild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstname = iprot.readString();
                struct.setFirstnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LASTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastname = iprot.readString();
                struct.setLastnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindNumberOfEnrollmentsForChild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstname != null) {
          oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
          oprot.writeString(struct.firstname);
          oprot.writeFieldEnd();
        }
        if (struct.lastname != null) {
          oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
          oprot.writeString(struct.lastname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindNumberOfEnrollmentsForChild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindNumberOfEnrollmentsForChild_argsTupleScheme getScheme() {
        return new FindNumberOfEnrollmentsForChild_argsTupleScheme();
      }
    }

    private static class FindNumberOfEnrollmentsForChild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindNumberOfEnrollmentsForChild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindNumberOfEnrollmentsForChild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstname()) {
          optionals.set(0);
        }
        if (struct.isSetLastname()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstname()) {
          oprot.writeString(struct.firstname);
        }
        if (struct.isSetLastname()) {
          oprot.writeString(struct.lastname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindNumberOfEnrollmentsForChild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstname = iprot.readString();
          struct.setFirstnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastname = iprot.readString();
          struct.setLastnameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FindNumberOfEnrollmentsForChild_result implements org.apache.thrift.TBase<FindNumberOfEnrollmentsForChild_result, FindNumberOfEnrollmentsForChild_result._Fields>, java.io.Serializable, Cloneable, Comparable<FindNumberOfEnrollmentsForChild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindNumberOfEnrollmentsForChild_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindNumberOfEnrollmentsForChild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindNumberOfEnrollmentsForChild_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindNumberOfEnrollmentsForChild_result.class, metaDataMap);
    }

    public FindNumberOfEnrollmentsForChild_result() {
    }

    public FindNumberOfEnrollmentsForChild_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindNumberOfEnrollmentsForChild_result(FindNumberOfEnrollmentsForChild_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public FindNumberOfEnrollmentsForChild_result deepCopy() {
      return new FindNumberOfEnrollmentsForChild_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public FindNumberOfEnrollmentsForChild_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FindNumberOfEnrollmentsForChild_result)
        return this.equals((FindNumberOfEnrollmentsForChild_result)that);
      return false;
    }

    public boolean equals(FindNumberOfEnrollmentsForChild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(FindNumberOfEnrollmentsForChild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FindNumberOfEnrollmentsForChild_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindNumberOfEnrollmentsForChild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindNumberOfEnrollmentsForChild_resultStandardScheme getScheme() {
        return new FindNumberOfEnrollmentsForChild_resultStandardScheme();
      }
    }

    private static class FindNumberOfEnrollmentsForChild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindNumberOfEnrollmentsForChild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindNumberOfEnrollmentsForChild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindNumberOfEnrollmentsForChild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindNumberOfEnrollmentsForChild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FindNumberOfEnrollmentsForChild_resultTupleScheme getScheme() {
        return new FindNumberOfEnrollmentsForChild_resultTupleScheme();
      }
    }

    private static class FindNumberOfEnrollmentsForChild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindNumberOfEnrollmentsForChild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindNumberOfEnrollmentsForChild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindNumberOfEnrollmentsForChild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
